/*
	Commerce BML Library
	validateBundleFlagForDynamicGrouping
	------------------------------------
	Params:
		String action
		String delimiter
	Returns:
		String validationMessage
*/
/* ------------------------------------------------------------------------ */
/* 							CONSTANTS & VARIABLES							*/
/* ------------------------------------------------------------------------ */
//Return variables
validationMessage = "";

//Constants for part custom fields
BUNDLE_FLAG = "custom_field19";

//Constants for part custom field values
BUNDLE_FLAG_TRUE = "Y";
BUNDLE_FLAG_FALSE = "N";

//Containers for line item attributes
piList = string[];
docNumList = string[];
piDict = dict("string");
seqNumDict = dict("integer");
descriptionDict = dict("string");
isPartOfPackageDict = dict("boolean");

//Containers for object relationships
partNumToBundleFlagDict = dict("string");

/* ------------------------------------------------------------------------ */
/* 					Obtain line item information							*/
/* ------------------------------------------------------------------------ */

for line in line_process {
	docNum = line._document_number;
	pi = line._part_number;
	
	if (pi <> "") {
		seqNum = line._sequence_number;
		description = line._part_desc;
		isPartOfPackage = line.isPartOfPackage_line;
		
		append(docNumList, docNum);
		append(piList, pi);
		put(piDict, docNum, pi);
		put(seqNumDict, docNum, seqNum);
		put(descriptionDict, docNum, description);
		put(isPartOfPackageDict, docNum, isPartOfPackage);
	}
}

/* ------------------------------------------------------------------------ */
/* 					Obtain part custom field records						*/
/* ------------------------------------------------------------------------ */

bundleFlagRecords = bmql("select part_number, custom_field19 from _parts where part_number in $piList");

for bundleFlagRecord in bundleFlagRecords {
	put(partNumToBundleFlagDict, get(bundleFlagRecord, "part_number"), get(bundleFlagRecord, BUNDLE_FLAG));
}

/* ------------------------------------------------------------------------ */
/* 					Validate bundled line items								*/
/* ------------------------------------------------------------------------ */

for docNum in docNumList {
	pi = get(piDict, docNum);
	isPartOfPackage = get(isPartOfPackageDict, docNum);
	bundleFlag = get(partNumToBundleFlagDict, pi);
	
	if (isPartOfPackage and bundleFlag == BUNDLE_FLAG_FALSE) {
		seqNumStr = string(get(seqNumDict, docNum));
		description = get(descriptionDict, docNum);
		validationMessage = validationMessage + "Attempt to group a product that cannot be bundled: " + description + "; Line #: " + seqNumStr + "; PI #: " + pi + "; Bundle Flag: " + bundleFlag + "\n";
	}
}

return validationMessage;