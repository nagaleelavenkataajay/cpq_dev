/*
	BML Utility Library
	getProductBasedPricingData
	--------------------------
	Params:
		String[] partNumList
		String[]Dict productBasedData
	Returns:
		StringDict result
			rowCount => number of records returned
	
	Description:
		For a given list of Part Numbers, return all Product Based Pricing
		conditions within the list of Part Numbers. condPI1, condPI2 and
		discountPI must all exist within the list of part numbers (otherwise
		there is no point!).
*/
count = -1;
result = dict("string");

productBasedDiscountConditions = bmql("select condPI1, condPI2, discountPI, discountVal, discountType, listPricePI from productBasedDisc where condPI1 in $piList and condPI2 in $piList and discountPI in $piList");

for record in productBasedDiscountConditions {
	count = count + 1; //Count should begin at 0, and increment to at most N, where N is the number of records returned in the RecordSet()
	
	data = string[];
	
	append(data, get(record, "condPI1"));
	append(data, get(record, "condPI2"));
	append(data, get(record, "discountPI"));
	append(data, get(record, "discountVal"));
	append(data, get(record, "discountType"));
	append(data, get(record, "listPricePI"));
	
	put(productBasedData, count, data);
}

put(result, "rowCount", string(count));

return result;