/* // PROD SITE.
        ==========================================================================
        | COMMERCE BML LIBRARY                                                   |
        +------------------------------------------------------------------------+
        | Pricing                                                                |
        ==========================================================================


        TERMINOLOGY
        ==========================================================================
        This section explains any non-standard variable naming conventions used
        in this script.

        +------------------------------------------------------------------------+
        | pi (PI)                                                                |
        +------------------------------------------------------------------------+
        | Abbrev. for "Priceable Item". For the purposes of BigMachines, this    |
        | is analagous to the Part Number.                                       |
        |                                                                        |
        +------------------------------------------------------------------------+
        | lineItemKey, <commerce_field_name>key                                  |
        +------------------------------------------------------------------------+
        | A term used to describe a dictionary key used for identifying          |
        | individual attributes. It is always in this format:                    |
        |   <document_number><DELIMITER><commerce_field_name>                    |
        | E.g. 3[@.@]tierPrice                                                   |
        |                                                                        |
        | In the case where a specific commerce field is mentioned, e.g.         |
        | tierPrice_line, this will be called "tierPriceKey"                     |
        |                                                                        |
        +------------------------------------------------------------------------+
        | pricingKey                                                             |
        +------------------------------------------------------------------------+
        | A term used to describe a dictionary key used for pricing util         |
        | functions. It is always in this format:                                |
        |   <pi><DELIMITER><qty_or_transactions>                                 |
        | E.g. 51840095[@.@]300                                                  |
        |                                                                        |
        +------------------------------------------------------------------------+
        | isGrouped                                                              |
        +------------------------------------------------------------------------+
        | In this script, this flag denotes the "isPartOfPackage_line" property  |
        | used by the end-user to indicate whether they wish to Dynamically      |
        | Group the line item. "isPartOfPackage" is just too verbose.            |
        |                                                                        |
        +------------------------------------------------------------------------+

        TABLE OF CONTENTS
        ==========================================================================
        i.  CONSTANTS -------------------------------------------- [CONSTANTS]
        ii. GLOBAL VARIABLES ------------------------------------- [VARIABLES]
        iii.GLOBAL CONTAINERS ----------------------------------- [CONTAINERS]

    */


/* Parameters to this function
actionName
triggerDict -  structure is (dict, key, key+TRIG_KEY_VALUE_DELIM+value)
                -   This is built in pricing and used in Approval library.
                - This structure is required so that the keys can be used later in Approval Library function

attributesDict - This dictionary contanis all the Quote and Line level attributes and their values
               - This is built in pricing and approval libraries and is passed to setAttributes library to form the final return string.
*/

stringsDict = dict("string");
floatsDict = dict("float");
integersDict = dict("integer");
result = "";
debug = false;

keyDelim = "~";
delim = "|";

/* ======================================================================== */
/*                              CONSTANTS [CONSTANTS]                       */
/* ======================================================================== */

DATE_FORMAT_PREFERENCE_HYPHEN = "yyyy-MM-dd"; //substring(_system_user_date_pref, 0, 10);
DATE_FORMAT_PREFERENCE_SLASH = "MM/dd/yyyy";
NUM_CUSTOM_GROUPS = 6;
TILDE_DELIMITER = "~";
DELIMITER = "@.@";
ACTION_DELIMITER = "*@*";
TRUE_STR = "true";
FALSE_STR = "false";
DPA_SIGNED = "dPASigned";

RAMP_FLAG_MULTIPLIER = 12;
PRICELIST = "";
TRANSACTION_XML_NODE_NAME = "transactions"; //This value must match the node name of the "transactions" node on the Ramp Plan XML
QUOTE_NUMBER = "quoteNumber_quote";
//add on related
INTERNAL_DELIMITER = "$$";
ASSET_DELIMITER = "@@";

INCREMENTAL_TRANSACTION_DEFAULT = 1;
//APPROVAL_STEP = "underManagerReview_process";

/* ------------------------- Constants for Promotions   ----------------------- */
// PROMO_CODES_LINE = "promotionCode_line";
PROMO_DETAILS = "promotionDetails_line";
PROMO_DETAILS_STR = "promotionDetailsStr_line";
PROMO_DISC_PERCENT = "promoDiscPercent_line";
PROMO_PRICE = "promoPrice_line";


/* -------------------- Constants for quote level Attributes ---------------- */
REGION = "ownerRegion_quote";
BUSINESS_UNIT = "ownerBU_quote";
THEATER = "ownerTheater_quote";
OWNER_TEAM = "ownerTeam_quote";
SEGMENT = "segment_quote";
PROMOTION_CODE = "promotionCode_quote";
MARKET = "ownerMarket_quote";
REVENUE_GROUP = "ownerRevenueGroup_quote";
ACCOUNT_VERTICAL = "accountVertical_quote";
CUSTOMER_TYPE = "customerType_quote";
QUOTE_TYPE = "quoteType_quote";
EXTERNAL_PROMOTION = "externalPromotion_quote";
QUOTE_DOC_NUM = "1";
SYSTEM_DATE = "_system_date";
CONVERSION_RATE = "conversionRate_quote";
NUM_DECIMALS = "numDecimals_quote";
BILLING_EXT_NET_PRICE  = "billingExtNetPrice_line";
RAMP_PLAN_QUOTE_DETAILS = "rampPlanDetails_quote";
TOTAL_CIP_SETUP_FEE = "totalCIPSetupFee_quote";//CSYS-96801 (LN. 8-23-2019)

RAMP_PARENT_NODE = "rampPlanDetail";
oRGNumCommittedTrans = 0;
// QUOTE_CURRENCY = "quoteCurrency_quote";
// COUNTRY_ISO_CODE = "billTo_countryISOCode_quote";
CONTRACT_SOURCE = contractSource_quote; //CSYS-100783 (BS. 10/13/2020)
TERM_NUM_MONTHS = termNumMonths_quote;	//CSYS-100783 (BS. 10/13/2020)
DATA_PROCESSING_AGREEMENT = dataProcessingAgreementFromAccountText_quote;	//CSYS-100783 (BS. 10/13/2020) CSYS-100884 NP 10/22/2020
serviceCountry = _quote_process_serviceAddress_country; //IESCNQRCPQ-554 (OK. 4-7-2023)
autoGenContract = autoGeneratedOnApproved_quote; //IESCNQRCPQ-1596 (LIK 04-03-2024)

//IESCNQRCPQ-1849 (OK. 6-3-2024) Format the contractEffectiveDate
contractEffectiveDate = getdate();
if (contractEffectiveDate_quote <> "") {
	contractEffectiveDate = util.getDateFromString(contractEffectiveDate_quote);
}

/* -------------------- Constants for Line Item Attributes ---------------- */
PART_NUM = "_part_number";
PARENT_DOC_NUM = "_parent_doc_number";
IMPLEMENTATION_METHOD = "implementationMethod_line";
CORE_OFFERING = "coreOffering_line";
TRANXCS = "numCommittedTransaction_line";//IESCNQRCPQ-1135
QTY = "_price_quantity";
TRANSACTIONS = "numCommittedTransaction_line";
IS_GROUPED = "isPartOfPackage_line"; //This form field is checked if the user wishes to DYNAMICALLY GROUP this line item
IS_UNITBASED = "unitBasedTransaction";
TRANS_VALIDATION_APPLIES = "transValidationApplies"; //CSYS-70683
DISCOUNT = "discount_line";
// DISCOUNTHIDDEN = "discountHidden_line";
DISCOUNT_TYPE = "discountType_line";
PERCENTAGE_DISCOUNT_TYPE = "%";
AMOUNT_DISCOUNT_TYPE = "Amt";
DISCOUNT_AMOUNT = "discountAmt_line";
DISCOUNT_PERCENT = "discountPercent_line";
LONG_DISCOUNT = "longDiscount_line";
CIP_SETUP_FEE = "cIPSetupFee_line";//CSYS-96801 (LN. 8-23-2019)
CIP_PRODUCT = "cipProduct_line";//CSYS-96801 (LN. 8-23-2019)

TERM_BASED_DISC = "termBasedDiscount_line";
//add on related
// ASSETS_NUM_OF_TRANSACTIONS = "assetOriginalOfCommittedMonthlyTransactions_line";
ASSETS_ORIGINAL_LIST_PRICE = "assetOriginalListPrice_list";
ASSETS_ORIGINAL_EXT_LIST_PRICE = "assetOriginalExtendedListPrice_list";
ASSETS_ORIGINAL_BUNDLE_ID = "originalBundleID_line";
ASSETS_ORIGINAL_TIER_PRICE = "assetOriginalTierPrice_line";//CSYS-95251
CORE_ASSET_SERVICEID = "coreAssetServiceId";
INCREMENTAL_FEE_LIST = "incrementalFeeList";
INCREMENTAL_FEE_LIST_USD = "incrementalFeeListUSD";


MODEL_FORCE_GROUPING = "modelForceGrouping";
//Ramp plan attribute variable names
RAMP_PLAN_OVERRIDE = "overrideDefaultRampPlan_line";
RAMP_PLAN_DETAIL = "rampPlanDetails_line";

RAMP_PLAN_DETAIL_SAVE_XML = "rampPlanDetailXMLSave_line";
RAMP_DELIMITER = "-_**_-";
PO_DELIMITER = "***";
PO_GROUPS_DYNAMIC_GROUPING = "poGroupsDynamicGrouping";
PO_RAMP_OVERRIDE = "poRampOverride";
PRIMARY_BASE_FEE = "primaryBaseFee";
TRANS_STRING = "transString";
FROM = "from";
TO = "to";

//Pricing Attribute Variable Names
TIER_PRICE = "tierPrice_line";
EXT_TIER_PRICE = "extTierPrice_line";
PROD_BASED_PRICE = "productBasedPrice_line";
// PROD_BASED_PRICE_USD = "extProductBasedPriceUSD_line";
EXT_PROD_BASED_PRICE = "extProductBasedPrice_line";

LIST_PRICE = "listPrice_line";
EXT_LIST_PRICE = "extendedList_line";
LIST_PRICE_USD = "listPriceUSD_line";
EXT_LIST_PRICE_USD = "extListPriceUSD_line";
CUSTOM_LIST_PRICE = "customListPrice_line";
ARR_LINE = "arr_line";

NET_PRICE_NON_UNIFIED = "netPriceNonUnified_line";
EXT_NET_PRICE_NON_UNIFIED = "extNetPriceNonUnified_line";
PACKAGE_ID = "package_line";
BUNDLE_ID = "bundleID_line";
CUSTOM_PRICING_HAS_OCCURED = "customPricingHasOccured_line";//CSYS-85811 (LN. 9/27/2017)

// Used for Base Fee that are not rampable to unify
RAMP_PRICE_FOR_NON_RAMPABLE_BASE = "rampPriceForNonRampableBase";

MODEL_PO_PRIORITY = "poPriority_concur";
MODEL_HAS_GROUPING = "modelHasGrouping_line";
// CORE_TRANSACTIONS = "coreTransactions";
TRANSACTION_RATIO = "transactionRatio";
INCREMENTAL_FEE_RATIO_VALUE = "incrementalFeeRatioValue";
INCREMENTAL_PI = "incrementalPi";
IS_RAMPABLE = "isRampable";
// Store the incremental fee for a PO for use with the base fee XML
INCREMENTAL_FEE_FOR_PO = "incrementalFeeForPO";
sAPIntegrationForFG = false;//IESCNQRCPQ-1174
sAPIntegration = false;//IESCNQRCPQ-1174
/* ------------------------ Constants for Part Fields --------------------- */
// PART_DESC = "description";

//Constants for part custom field names
PO_ID = "poId_line";
PO_NAME = "poName_line";
PO_START_DATE = "poStartDate_line";
PO_END_DATE = "poEndDate_line";
PI_ITEM_TYPE = "piItemType_line";
USAGE_QUALIFCATION_GROUP = "usageQualificationGroup_line";
BillingCounterAddOn = "billingCounter_line";//CSYS-106563	
billingCounter = "";//CSYS-106564
TERM_OF_COMMITMENT = "termOfCommitment_line";
EDITION = "edition_line";
PARAMETER_ID = "parameterId_line";
RAMP_FLAG = "rampFlag_line";
SPECIAL_WORKFLOW_FLAG = "specialWorkflowFlag_line";
UOM_TYPE = "uomType_line";
ROLL_UP = "rollUp_line";
UOM_BLOCK = "uomBlock_line";
BUNDLE_FLAG = "bundleFlag_line";
PO_CATEGORY = "poCategory_line";
UNIT_OR_FIXED = "unitOrFixed_line";
ONE_DAY_SUB = "oneDaySub_line";//CSYS-83106 LN. 7/20/2017
//Constants for part custom field values
UOM_QTY = "QTY";
UOM_TRXN = "TRXN";
PCF_YES = "Y";
PCF_NO = "N";
CORE_SERVICE = "Core Service";
EXT_SERVICE = "Extended Service";
INCREMENTAL_FEE = "Incremental";
BASE_FEE = "Base";
SETUP_FEE = "Setup";
PRE_PRODUCTION = "Pre Prod";
USE_CUSTOM_PRICE = "useCustomPrice_line";
NON_RAMPABLE_BASE_INCREMENTAL_STRING = "nonRampableBaseIncrementalString";
ProfServOnlyArray = Boolean[]; //(CSYS-100128 S.V 10-08-2020)
nonProfServCreate = false; //(CSYS-100128 S.V 10-08-2020)
expensePaySKUsExist = false;//IESCNQRCPQ-1139
expensePaymentManagerExists = false;//IESCNQRCPQ-1139
//Mapping of Part Custom Field variable to display name
CUSTOM_FIELD_DICT = dict("string");
put(CUSTOM_FIELD_DICT, "custom_field1", PO_ID);
put(CUSTOM_FIELD_DICT, "custom_field2", PO_NAME);
put(CUSTOM_FIELD_DICT, "custom_field3", PO_START_DATE);
put(CUSTOM_FIELD_DICT, "custom_field4", PO_END_DATE);
put(CUSTOM_FIELD_DICT, "custom_field8", PI_ITEM_TYPE);
put(CUSTOM_FIELD_DICT, "custom_field9", USAGE_QUALIFCATION_GROUP);
put(CUSTOM_FIELD_DICT, "custom_field10", TERM_OF_COMMITMENT);
put(CUSTOM_FIELD_DICT, "custom_field11", EDITION);
put(CUSTOM_FIELD_DICT, "custom_field12", PARAMETER_ID);
put(CUSTOM_FIELD_DICT, "custom_field13", RAMP_FLAG);
put(CUSTOM_FIELD_DICT, "custom_field14", SPECIAL_WORKFLOW_FLAG);
put(CUSTOM_FIELD_DICT, "custom_field15", UOM_TYPE);
put(CUSTOM_FIELD_DICT, "custom_field21", ROLL_UP);
put(CUSTOM_FIELD_DICT, "custom_field18", UOM_BLOCK);
put(CUSTOM_FIELD_DICT, "custom_field19", BUNDLE_FLAG);
put(CUSTOM_FIELD_DICT, "custom_field20", PO_CATEGORY);
put(CUSTOM_FIELD_DICT, "custom_field22", UNIT_OR_FIXED);
put(CUSTOM_FIELD_DICT, "custom_field26", ONE_DAY_SUB);//CSYS-83106 LN. 7/20/2017

//CSYS-88632 (LN. 2/19/2018) New dictionaries and arrays used to indicate whether there has been a tier increase/decrease at each core
CORE_TIER_INCREASE = dict("string");
CORE_TIER_DECREASE = dict("string");
tierIncreaseArray = string[];
tierDecreaseArray = string[];

/* CSYS-87106 (LN. 1/23/2018) New dictionaries used to leverage the calculation of ARR when their is a CREATE/TERMINATE in the same Product Family AND a Tier Decrease */
PRODUCT_FAMILY = "productFamily_line";//CSYS-95591
LINE_COMMENT_ASSET_STRING = "lineItemComment_line";//CSYS-95591
EXISTING_ARR_CURRENCY_LINE = "existingARRCurrency_line";
PRODUCT_FAMILY_DICT = dict("string");
PRODUCT_FAMILY_CREATE_TIER_COUNT_DICT = dict("integer");
PRODUCT_FAMILY_TERMINATE_TIER_COUNT_DICT = dict("integer");
PRODUCT_FAMILY_MODIFY_TIER_COUNT_DICT = dict("integer");//CSYS-95591
PRODUCT_FAMILY_TRXN_DICT = dict("integer");
PROD_FAM_TIER_DECREASE_OCCURRED_DICT = dict("string");
//IESCNQRCPQ-724 Start
promoCreateDict = dict("string");
promoDeleteDict = dict("string");
familyPartNoDict = dict("string");
piForNoPromoArray = String[];
familyRecordSet = bmql("SELECT part_number,part_custom_field23 FROM sysTerminations");
//print "familyRecordSet ="; //print familyRecordSet;
for rec in familyRecordSet{
	put(familyPartNoDict, get(rec, "part_number"),get(rec, "part_custom_field23"));
}
//IESCNQRCPQ-724 End
//CSYS-93972 (LN. 12-5-2018)
AUDIT_48_HOUR_POLICY_AUDIT_PO = "4388629";
AUDIT_48_HOUR_RECEIPT_AUDIT_PO = "4388615";
POLICY_RECEIPT_AUDIT_TRXN_COUNT = "POLICY_RECEIPT_AUDIT_TRXN_COUNT";
//CSYS-100418 (SV. 17-09-2020) Start 
ADDON_HISTORICAL_TAX_RECLAIM_PO = "7218583";
CONCUR_VATBOX_TRXN_COUNT = "CONCUR_VATBOX_TRXN_COUNT";
//CSYS-100418 End
ADDON_RECLAIM_AND_OPTIMIZATION_PO = "7218555"; //CSYS-100822 (SV. 19-10-2020)
//CSYS-100552 (SV. 21-09-2020) Start 
TAP_TO_EXPENSE_PO = "7097556";
JAPAN_PUBLIC_TRANSPORT_TRXN_COUNT = "JAPAN_PUBLIC_TRANSPORT_TRXN_COUNT";
//CSYS-100552 End
//CSYS-104811 Start (PG. 21-12-2021)
INTELLIGENT_AUDIT_ESSENTIALS_EDITION_EXPEDITED_SERVICE_ADDON_PO = "8825427";
INTELLIGENT_AUDIT_ESSENTIALS_TRXN_COUNT = "INTELLIGENT_AUDIT_ESSENTIALS_TRXN_COUNT";
//CSYS-104811 End
//CSYS-104818 Start (PG. 21-12-2021)
INTELLIGENT_AUDIT_ADVANCED_EDITION_EXPEDITED_SERVICE_ADDON_PO = "8825411";
INTELLIGENT_AUDIT_ADVANCED_TRXN_COUNT = "INTELLIGENT_AUDIT_ADVANCED_TRXN_COUNT";
//CSYS-104818 End
PRIME_PACKAGE_PRESENT = "primePackagePresent";//CSYS-94167 & CSYS-94755 & CSYS-97827 & CSYS-97864
PARTNER_EXPANSION_SKU_PI = "4459125";//CSYS-97924 (MJ 1/13/2020)
PARTNER_IMPLEMENTATION_PI = "6845718"; //CSYS-98798 (MJ 5/19/2020)
PARTNER_MARKETPLACE_CONCUR_INTEGRATION_ADP_PI = "9158386"; //CSYS-106018 (PG 28.04.2022)
FINANCIAL_INTEGRATION_PROGRAM_PI = "9469018"; //CSYS-106334 (AP 21-07-2022)
PARTNER_SANDBOX_INCLUDED_PI = "10801809"; //IESCNQRCPQ-768 PG(11/07/2023)
																								 

/* ------------------------- Constants for Parameters --------------------- */
QUOTE_TRANSACTIONS = numCommittedTransaction_quote;
QUOTE_LEVEL_RAMP_PLAN = rampPlanDetails_quote;
//DC CSYS-93150
if (util.isDigitalCommerceTransaction(_system_user_login) /* AND numCommittedTransaction_quote <> 0 */ AND NOT isnull(numCommittedTransaction_quote) AND QUOTE_LEVEL_RAMP_PLAN == ""){
    QUOTE_LEVEL_RAMP_PLAN = "<rampPlanDetails className='rampPlanDetails' rowCounterDisplayName='Ramp Plans' parentNodeName='rampPlanDetails' childNodeName='rampPlanDetail'>" + "\n" +
    "<rampPlanDetail rampPlanID ='1'>" + "\n" +
    "<from displayArray='undefined' displayName='From Months' readOnly='false'>1</from>" + "\n" +
    "<to displayArray='undefined' displayName='To Months' readOnly='true'>and beyond</to>" + "\n" +
    "<transactions displayArray='undefined' displayName='Transactions / Units' readOnly='false'>NUMOFTRXNS</transactions>" + "\n" +
    "</rampPlanDetail>" + "\n" +
    "</rampPlanDetails>";
    QUOTE_LEVEL_RAMP_PLAN = replace(QUOTE_LEVEL_RAMP_PLAN, "NUMOFTRXNS", string(QUOTE_TRANSACTIONS), 1);
}

LINE_RAMP_FROM_MONTHS = "lineRampFromMonths_line";
QUOTE_RAMP_PLAN_TRANSACTION_RATIOS = float[];   //This is initialized in a later section
/* --------------------- Constants for Config Attributes ------------------ */
CONFIG_IMPLEMENTATION_METHODS = "implementationMethods_concur";
CONFIG_CORE_OFFERING = "coreOfferings_concur";
NON_CORE_HAS_SETUP = "nonCoreHasSetup_line"; //CSYS-80655 LN 4/26/17 Flag used to determine whether an extended service or Professional Service has a Setup
UNIT_BASED_CAN_HAVE_INDEPENDENT_RAMP_PLAN = "unitBasedCanHaveIndependentRampPlan";//CSYS-95500

/* ======================================================================== */
/*                      GLOBAL VARIABLES [VARIABLES]                        */
/* ======================================================================== */
/* ------------------------------ Meta-Variables -------------------------- */
utilResultDict = dict("string");
utilResultFlag = false;
utilResultString = "";
extractServiceExist = false;//IESCNQRCPQ-177
unifiedExists = false;

/* ------------------------- Variables for Quote Totals ------------------- */
// totalArrNet = 0.0;            //Sum of all Rampable parts (Ext. Net Price * 12)
// totalArrList = 0.0;         //Sum of all Rampable parts (Ext. List Price * 12)
// totalOneTimeFeeNet = 0.0;   //Sum of all non-Ramp parts (Ext. Net Price)
// totalOneTimeFeeList = 0.0;  //Sum of all non-Ramp parts (Ext. List Price)
// totalExtendedListPrice = 0.0;
totalPromoDiscounts = 0.0;
// totalLineItemDiscounts = 0.0;
// totalExtendedNetPrice = 0.0;
// totalSetupFeeList = 0.0;
// totalSetupFeeNet = 0.0;
// totalBaseFeeList = 0.0;
// totalBaseFeeNet = 0.0;
// totalPreProductionFeeList = 0.0;
// totalPreProductionFeeNet = 0.0;
// totalIncrFeeList = 0.0;
// totalIncrFeeNet = 0.0;
totalCIPSetupFee = 0.0;//CSYS-96801 (LN. 8-23-2019)
QUOTE_TOTAL_EXISTING_ARR = 0.0;

numOfTransactionsChangeDict = dict("float");//key - parent doc number; value - number of transactions of the of the core product.

/* ------------------------- Variables for assets management (add on) -------------------- */
MODIFY_ACTION = "MODIFY";
NONE_ACTION = "NONE";
TERMINATE_ACTION = "TERMINATE";
CREATE_ACTION = "CREATE";
configuredAssetsService = "";//a !^! delimited list of all ceonfigured service IDs
ASSET_ACTION = "assetAction_line";
ASSET_STRING = "assetString_line";

//add on initializations
poList = dict("string[]");// a dictionary containing an array of all participating POs for intelligence sorted by model (parent doc num)
fullPOlist = string[];// a full list of participating POs

ASSET_PID = 0;
ASSET_IS_BUNDLE = 2;
ASSET_NEXT_BILLING_DATE = 15;
ASSET_ADJUSTED_ARR = 17;


isAddOnQuote = false;
trxnsCS = 0; //IESCNQRCPQ-164
NEW_BIZ = "New Business";
ADD_ON = "Add-On Business";
SMB_BU = "SMB BU";//CSYS-94167

acctPartnerDiscount = partnerDiscount_quote; //CSYS-68345

assetGroupMappingDict = dict("string");//key: model doc num
listOfCore = string[];//an array containing all the core products for competibility contraint
listOfIM = string[];//an array containing all implementation methods.

/* ------------------------- Variables to Recategorize -------------------- */
conversionRate = 0.0;


currentDateText = substring(datetostr(getdate()), 0, 10);
updateDateText = currentDateText;
createdDate = getdate();
if(createdDate_quote <> ""){
  updateDateText = substring(createdDate_quote, 0, 10);
}
currentDate = getdate();
if(find(currentDateText, "/") <> -1) {
    currentDate = strtojavadate(currentDateText, DATE_FORMAT_PREFERENCE_SLASH);
} else {
    currentDate = strtojavadate(currentDateText, DATE_FORMAT_PREFERENCE_HYPHEN);
}
if(find(updateDateText, "/") <> -1) {
    //updateDate = strtojavadate(updateDateText, DATE_FORMAT_PREFERENCE_SLASH);
    createdDate = strtojavadate(updateDateText, DATE_FORMAT_PREFERENCE_SLASH); //For ramp deletion upgrade
    //updateDate = adddays(updateDate, adminNumDayRefreshPartDB_quote);
} else {
    //updateDate = strtojavadate(updateDateText, DATE_FORMAT_PREFERENCE_HYPHEN);
    createdDate = strtojavadate(updateDateText, DATE_FORMAT_PREFERENCE_HYPHEN); //For ramp deletion upgrade
    //updateDate = adddays(updateDate, adminNumDayRefreshPartDB_quote);
}

/* ======================================================================== */
/*                      GLOBAL CONTAINERS [CONTAINERS]                      */
/* ======================================================================== */
/* ------------------------- Variables for Quote State -------------------- */
piList = string[];
docNumList = string[];

//Line Item Attribute Containers - these dictionaries are all keyed by docNum
piDict = dict("string");

//Pricing Containers - these dictionares are all keyed by the pricingKey: <pi><DELIMITER><qty_or_num_transactions>
piQtyAndImplementationMethodToPriceDict = dict("float");

//Containers for mapping Models to associated data
modelToLineDocNumsDict = dict("string[]");
modelToLinePartNumsDict = dict("string[]");

//Special Containers
piQtyAndImplementationMethodDict = dict("string"); //A dictionary used for decomposed computations performed in util functions
piQtyAndImplementationMethodList = string[];
unifiedPricingDataDict = dict("string[]"); // Key: integer (Row Count), so that the application will be able to get all the rows from the dictionary.  Value: Each row data in the data table.
incrementalFeeTransactionDict = dict("integer"); // Key: String ( modelDocNum + DELIMITER + PO )
//maxItemType = dict("string[]");  // Key: Item Type

//Next billing Date and Asset Adjustment to ARR
quoteAssetArr = split(assetsString_quote, ASSET_DELIMITER );
assetBillingDict = dict("string");
assetAdjArrDict = dict("string");
assetPiIdArray = string[]; //IESCNQRCPQ-660 (OK. 5-19-2023)

for quoteAsset in quoteAssetArr{
    splitAsset = split( quoteAsset, INTERNAL_DELIMITER );
    assetPID = splitAsset[ASSET_PID];
    assetBillingDate = splitAsset[ASSET_NEXT_BILLING_DATE];
	
	// CSYS-100331 (OK. 8-25-2020) Start: Set Next billing Date value to Order effective date for Add on quotes in SAP Other 
	if (SAPSellsConcurFromAccount_quote == "Shadow Harmony Quote" AND quoteType_quote == "Add-On Business") {
		assetBillingDate = orderEffectiveDate_quote;
	}
	//CSYS-100331 -End
	
    put( assetBillingDict, assetPID, assetBillingDate );
	
	//IESCNQRCPQ-660 (OK. 5-19-2023) new array for asset pi
	if (findinarray(assetPiIdArray, assetPID) == -1) {
		append(assetPiIdArray, assetPID);
	}
	
    //CSYS-70966 part 1: parse the correct value for assetOriginalGroupCheck_line off the asset string:
    assetIsGrouped = splitAsset[ASSET_IS_BUNDLE];
    put( assetBillingDict, assetPID + "assetIsBundleKey", assetIsGrouped );

    assetAdjArr = splitAsset[ASSET_ADJUSTED_ARR]; //CSYS-46906 Part 1
    if(assetAdjArr <> ""){
        put( assetAdjArrDict, assetPID, assetAdjArr );
    }
}

// CSYS-107571 SV. 27-12-2022 Start
preProdExtNetDict = dict("string");
preProdArr = split(preProductionExtNetPriceString_quote, ASSET_DELIMITER );
for each in preProdArr{	
	splitPreProdArr = split(each, INTERNAL_DELIMITER );
	put(preProdExtNetDict,splitPreProdArr[1],splitPreProdArr[5]);

}
isPreProdRestatement = string[];
// CSYS-107571 End
dateNextYear = addmonths(getdate(), 12); // IESCNQRCPQ-399 SV.10-03-2023 Added to hold the value of current date of next year			  

/* ------------------------------------------------------------------------ */
/*                  Populate Error messages                                 */
/* ------------------------------------------------------------------------ */
errorDict = dict("string");
language = "en";
errorMsgs = bmql("SELECT messageCode, message FROM messageTable WHERE language = $language" );
for error in errorMsgs{
    put( errorDict, get( error, "messageCode" ), get( error, "message" ) );
}

/* ------------------------- Variables for Promotions   ----------------------- */
implementationMethodArr = string[];
partNumArr = string[];
invalidPromoMessage = "";
internalPromoDescDict = dict("string"); // key: promotion
externalPromoDescDict = dict("string"); // key: promotion
customerFriendlyPromoDescDict = dict("string"); // key: promotion
legalPromoDescDict = dict("string"); // key: promotion
promoCodeDescAndDetailsDict = dict("string");
promoResultsDict = dict("string");
promotionsDataDict = dict("string[]");
promoCodeApplied = "";
promoCodeDetails = "";

applicablePromotions = "";
autoAppliedPromotions = "";

/* BM_VT. 07/05/2012. Added for Systematized Contracts Project */
/* Kevin Z. 052113. Updated to add Consulting Session, Site Review & Site Review Elite */
concurforceKey = "Concurforce";
premierTravelKey = "PremierTravel";
clientWebServiceKey = "ClientWebService";
meetingMgtKey = "meetingMgt";
intelRptKey = "IntelRpt";
singleCountryKey = "singleCountryExpReq";
multiCountryKey = "multiCountryExpReq";
consultingSessionKey = "consultingSessionReq";
siteReviewKey = "siteReviewReq";
siteReviewEliteKey = "siteReviewEliteReq";

posToBeGrouped = util.isPOGrouped();
// ~944~893~914~4906~
posRequiringDiffSOFTemplate = dict("string");
concurforcePOs = "";
premierTravelPOs = "";
clientWebServicePOs = "";
intelRptPOs = "";
meetingMgtPOs = "";
singleCountryExpPOs = "";
multiCountryExpPOs = "";
consultingSessionPOs = "";
siteReviewPOs = "";
siteReviewElitePOs = "";

posRequiringDiffSOFTemplate = util.getPOsforConcurForceAndPremierTravelSOF();
if (containskey(posRequiringDiffSOFTemplate,concurforceKey)) {
    concurforcePOs = get(posRequiringDiffSOFTemplate,concurforceKey);
}
if (containskey(posRequiringDiffSOFTemplate,premierTravelKey)) {
    premierTravelPOs = get(posRequiringDiffSOFTemplate,premierTravelKey);
}
if (containskey(posRequiringDiffSOFTemplate,clientWebServiceKey)) {
    clientWebServicePOs = get(posRequiringDiffSOFTemplate,clientWebServiceKey);
}
if (containskey(posRequiringDiffSOFTemplate,meetingMgtKey)) {
    meetingMgtPOs = get(posRequiringDiffSOFTemplate,meetingMgtKey);
}
if (containskey(posRequiringDiffSOFTemplate,intelRptKey)) {
    intelRptPOs = get(posRequiringDiffSOFTemplate,intelRptKey);
}
if (containskey(posRequiringDiffSOFTemplate,singleCountryKey)) {
    singleCountryExpPOs = get(posRequiringDiffSOFTemplate,singleCountryKey);
}
if (containskey(posRequiringDiffSOFTemplate,multiCountryKey)) {
    multiCountryExpPOs = get(posRequiringDiffSOFTemplate,multiCountryKey);
}
if (containskey(posRequiringDiffSOFTemplate,consultingSessionKey)) {
    consultingSessionPOs = get(posRequiringDiffSOFTemplate,consultingSessionKey);
}
if (containskey(posRequiringDiffSOFTemplate,siteReviewKey)) {
    siteReviewPOs = get(posRequiringDiffSOFTemplate,siteReviewKey);
}
if (containskey(posRequiringDiffSOFTemplate,siteReviewEliteKey)) {
    siteReviewElitePOs = get(posRequiringDiffSOFTemplate,siteReviewEliteKey);
}

concurforceExistInQuote = FALSE_STR;
premierTravelExistInQuote = FALSE_STR;
clientWebServiceInQuote = FALSE_STR;
intelligenceReportInQuote = FALSE_STR;


//@DS: 10/29/2012 Support single and multi country language on SOF
//Kevin Z: updated for Consulting Session, Site Review & Site Review Elite 05.21.13
singleCountryExpExistInQuote = FALSE_STR;
multiCountryExpExistInQuote = FALSE_STR;
consultingSessionExistInQuote = FALSE_STR;
siteReviewExistInQuote = FALSE_STR;
siteReviewEliteExistInQuote = FALSE_STR;

meetMgtInQuote = FALSE_STR;
unitBasedPOs = util.getUnitBasedRecurringServicesPI();


/* End BM_VT 07/05/2012 */

/* ======================================================================== */
/*                      Initialize quote level constants                    */
/* ======================================================================== */

/* ------------- Initialize QUOTE_RAMP_PLAN_TRANSACTION_RATIOS ------------ */
quoteRampTransactionStrings = util.getXMLNodeValues(QUOTE_LEVEL_RAMP_PLAN, "transactions"); //This will be a string array, e.g. ["100", "200", "300", "400", "500"]

QUOTE_RAMP_PLAN_TRANSACTION_RATIOS = util.getQuoteRampPlanTrxnRatios(quoteRampTransactionStrings, numCommittedTransaction_quote);//CSYS-100257

// This is an exception to properly populate line level ramp values with an untouched header level ramp
if ( QUOTE_LEVEL_RAMP_PLAN == "" AND isempty( QUOTE_RAMP_PLAN_TRANSACTION_RATIOS )){
    append( QUOTE_RAMP_PLAN_TRANSACTION_RATIOS, 1.0 );
}

outputDisplayRamp = FALSE_STR;
if( sizeofarray( quoteRampTransactionStrings) <> 0 ){
    if ( sizeofarray( quoteRampTransactionStrings ) > 1 ){
        outputDisplayRamp = TRUE_STR;
    }
    //CSYS-82292 (KA. 6-14-2017): populate quote ramp transactions on the first iteration:
    elif( sizeofarray( quoteRampTransactionStrings ) == 1 ){
        if(quoteType_quote == ADD_ON AND NOT firstIterationExecuted_quote){
			quoteRampTransactionStrings = util.getInitialRampTransactionsForAO(assetsString_quote);//CSYS-100257		
        }
    }
}

orgRampPlanDetails = "";
orgTerm = "";
QUOTE_LEVEL_RAMP_PLAN = util.spliceXMLNodeValuesExtended(QUOTE_LEVEL_RAMP_PLAN, TRANSACTION_XML_NODE_NAME, quoteRampTransactionStrings, RAMP_PARENT_NODE);

utilResultFlag = util.putStringAttribute( stringsDict, QUOTE_DOC_NUM, DELIMITER, RAMP_PLAN_QUOTE_DETAILS, QUOTE_LEVEL_RAMP_PLAN );

/* ------------------------ Get Billing Cycle Number ---------------------- */
billingCycleNumber = util.getBillingCycleNumber(billingCycle_quote);//CSYS-100257
/* ------------------------ Pricelist Selection --------------------------- */
businessUnit = ownerBU_quote;
companyName = _system_supplier_company_name;
currencyCode = quoteCurrency_quote;

currencyInformationDict = util.getCurrencyData( currencyCode );
numDecimals = 2;
CURRENCY_SYMBOL = "$";

countryIsoCode = util.getCountryISOCode(_quote_process_billing_country);//CSYS-100257

/* ----------------------- Variables for correctly setting transactions of line items */
overwriteTransactionArr = String[];
// Incremental Fee transactions will be set to lineGlobalTransactions, then returned to 1 at the end.

/* ------------------------ END TRANSACTION VARS ----------------------------- */
if ( containskey( currencyInformationDict, "error" ) <> true ){
    numDecimals = util.customAtoi(get( currencyInformationDict, "numDecimals" ), 0);
    utilResultValue = util.putFloatAttribute( floatsDict, QUOTE_DOC_NUM, DELIMITER, CONVERSION_RATE, atof(get( currencyInformationDict, "conversionRate" ) ));
    utilResultValue= util.putIntegerAttribute( integersDict, QUOTE_DOC_NUM, DELIMITER, NUM_DECIMALS, util.customAtoi(get( currencyInformationDict, "numDecimals" ),0 ));
    CURRENCY_SYMBOL = get( currencyInformationDict, "currencySymbol" );
}

/*
    CSYS-95956 (LN. 6-5-2019) Moved this further up in Pricing, we need to evaluate the conversion rate sooner,
    to support the Pricebook increase for non-USD currency quotes.
*/
conversionRate = util.getFloatAttribute( floatsDict, QUOTE_DOC_NUM, DELIMITER, CONVERSION_RATE );

if ( conversionRate == 0.0 ){
    conversionRate = 1.0;
}

/* ======================================================================== */
/*                      Get Price List                                      */
/* ======================================================================== */
utilResultDict = util.getPriceList(companyName, businessUnit, currencyCode);

PRICELIST = get(utilResultDict, "pricelist");
//ownerTheater = ownerTheater_quote;
//ownerMarket = ownerMarket_quote;
quoteType = quoteType_quote;

//CSYS-83094 (KA. 8-7-2017):
quoteTheater = ownerTheater_quote;
quoteMarket = ownerMarket_quote;
//quoteVertical = accountVertical_quote;//CSYS-88979.  UPDATE:  OC 9.30.19 - Removing per CSYS-97295

if(partnerBillingQuote_quote){//CSYS-95097
    quoteTheater = accountArea_quote;
    quoteMarket = market_quote;
    PRICELIST = businessUnit_quote;
	//IESCNQRCPQ-1025 VK changing Billing cycle to Annually for Partner Billing Quotes
	utilResultString = util.formAttrValueStr(attributesDict, "billingCycle_quote", QUOTE_DOC_NUM, "Annually");
}

utilResultFlag = util.putStringAttribute( stringsDict, QUOTE_DOC_NUM, DELIMITER, "priceList", PRICELIST );
utilResultFlag = util.putStringAttribute( stringsDict, QUOTE_DOC_NUM, DELIMITER, "currencyCode", currencyCode );
utilResultFlag = util.putStringAttribute( stringsDict, QUOTE_DOC_NUM, DELIMITER, QUOTE_NUMBER, quoteNumber_quote );

//Case 00180017 - Add temp dictionary to hold unbundled value for discounts
unbundledExtendedListPriceDict = dict("float");
//End 00180017 (1/3)
//ATG (1 of 1) Moved from below 1st loop to here to combine loops
/* case 85005 May 14 2012*/
strImpMethod = "";

//########## Detect Core and Edition Changes within configuration ##########//
isCoreChangedDict = dict("string");
isEditionChangedDict = dict("string");
detectEditionAndCoreChanges = commerce.detectEditionAndCoreChanges(isCoreChangedDict,isEditionChangedDict);

//CSYS-61512. KA. 4-27-2016. Update: commenting out until further notice due to biz requirement change.
/*TandM_Dict = dict("string");
TandM_Rez = BMQL("SELECT TandM_PO, TandM_Attr, TandM_Product FROM TimeAndMaterials"); //Grab the list of TandM PO's and their related config attributes from the data table*/

//We need to make sure with cases like reconfigure core, swap core/edition, that docNums are iterated through in order.
//This applies to the 'for modelDocNum in docNumList' loops
//Therefore, the next 2 lines added for CSYS-75571 (KA. 1-19-2017):
seqNumAttributeMappingDict = dict("string");
seqNumArray = integer[];

//CSYS-85811 (LN. 9/27/2017) If submit for custom pricing is ran (therefore setting customPricingFlag_quote to 'true') put the value of 1 into the piQtyAndImplementationMethodToPriceDict dictionary to use for evaluation in the util.getStandTierPricing
if(customPricingFlag_quote){
    utilResultFlag = util.putFloatAttribute( piQtyAndImplementationMethodToPriceDict, "customPricingExecuted", DELIMITER, "customPricingExecuted", 1);
}

//CSYS-94033
coreTerminateEditionDict = dict("string");//CSYS-95225 (LN. 3-28-2019)

listOfNumOfTransPOs = string[];
listOfNumOfTransPOs = util.getTransactionMatchPOs(fullPOlist, stringsDict);//CSYS-100258

//CSYS-95701 SN. 09-2019
travelAndExpenseWithTriplinkProductArr = String[];
travelAndExpenseWithTriplinkProductArr = util.getTravelAndExpensePIs();//CSYS-100258


baseArray = string[]; //for CSYS-37711 part 2
incArray = string[]; //for CSYS-37711 part 2

//CSYS-92516 (LN. 8-27-2018) Flag to check if there are any MODIFYs in an Add-On bundle
bundleIsModify = false;
//94033
quoteTierChange = FALSE_STR;
//CSYS-97101 SN. 09-2019
pTECreateExists="false";//CSYS-103884 NP 08/17/2021
cCHexists = "false"; //IESCNQRCPQ-972 PG(10-08-2023)
detectOversightSpecialEditionExists = "false"; //IESCNQRCPQ-1882 TJG(6-26-2024)
payExtractOrESASExists = "false"; //IESCNQRCPQ-1882 TJG(6-26-2024)
resultFlag = commerce.manageAssetAndTrxnInfo(stringsDict, integersDict, floatsDict, attributesDict, triggerDict, seqNumAttributeMappingDict, seqNumArray, baseArray, incArray, listOfNumOfTransPOs, overwriteTransactionArr, piQtyAndImplementationMethodToPriceDict, isCoreChangedDict, isEditionChangedDict, coreTerminateEditionDict, travelAndExpenseWithTriplinkProductArr, incrementalFeeTransactionDict, CORE_TIER_INCREASE, CORE_TIER_DECREASE, fullPOlist, conversionRate, assetBillingDict, assetAdjArrDict, quoteRampTransactionStrings, actionName);//CSYS-100479

resultFlag = commerce.captureProdBasedLinesForRamps(stringsDict, integersDict);//CSYS-100481
BILLING_COUNTER = "BILLING_COUNTER"; //CSYS-106562	
																								
/*CSYS-106955 (OK. 8-19-2022) Comment out the code related to "INVACHMIGRATEWAIVER" promotion
promoRecords = bmql("SELECT accountId, availability, promoCode FROM AccountIdBasedPromo WHERE accountId = $customer_ID_BACK");  //CSYS-103355 (OK. 7-26-2021) Created new table "AccountIdBasedPromo" to restrict the promo availablity based on account id
*/

							 
													   
													 
isConcurRequestPresent = false; //IESCNQRCPQ-1060 - VK
isAdvConfigTrainingConcurRequestPresent = false; //IESCNQRCPQ-1060 - VK																			
for line in line_process {
    docNum = line._document_number;
    piItemType = line._part_custom_field8;
    parentDocNum = line._parent_doc_number;
    pi = line._part_number;
    poID = line._part_custom_field1;
    append(piList, pi);
    append(docNumList, docNum);
    put(piDict, docNum, pi);
    modelImplementationMethod = "";
    modelNameFromGrid = line._model_name;
	assetAction = line.assetAction_line;// CSYS-100495 NT
	configAttrInfo = line._config_attr_info;
	trxnsCS = line.numCommittedTransaction_line; //IESCNQRCPQ-164	
	if (pi <> "") { //If the line item is a Product, and not a Model
		//CSYS-100479
		/* BM_VT. 07/05/2012. Added for Systematized Contracts Project */
        if(find(concurforcePOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and concurforceExistInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {// If Concurforce PO exist. Added the action check for CSYS-46393 (ATG)
            concurforceExistInQuote = TRUE_STR; // Set to true.
        } elif(find(premierTravelPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and premierTravelExistInQuote == FALSE_STR and concurforceExistInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {      // else check for premier travel. both cannot exist at the same time. Added the action check for CSYS-46393 (ATG)
            premierTravelExistInQuote = TRUE_STR;   // Set to true.
        }

        if(find(clientWebServicePOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and piItemType == SETUP_FEE and clientWebServiceInQuote == FALSE_STR AND assetAction == CREATE_ACTION) {// If CWS PO exist and line item is a setup. Added the action check for CSYS-46393 (ATG)
            clientWebServiceInQuote = TRUE_STR; // Set to true.
        }
        if(find(intelRptPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and intelligenceReportInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {        // If Intelligence Report PO exist. Added the action check for CSYS-46393 (ATG)
            intelligenceReportInQuote = TRUE_STR;// Set to true.
        }

        if(find(meetingMgtPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and meetMgtInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {     // If Meeting Management PO exist. Added the action check for CSYS-46393 (ATG)
            meetMgtInQuote = TRUE_STR;  // Set to true.
        }

        //@DS: Language updates for multi and single country  Kevin Z. updated to add Consulting Session, Site Review & Site Review Elite 5.21.13

        if(find(multiCountryExpPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and multiCountryExpExistInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {       // If multiCountryExp PO exist. Added the action check for CSYS-46393 (ATG)
            multiCountryExpExistInQuote = TRUE_STR; // Set to true.
        }
        if(find(singleCountryExpPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and singleCountryExpExistInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {     // If singleCountryExp PO exist. Added the action check for CSYS-46393 (ATG)
            singleCountryExpExistInQuote = TRUE_STR;    // Set to true.
        }
        if(find(consultingSessionPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and consultingSessionExistInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {       // If consultingSession PO exist. Added the action check for CSYS-46393 (ATG)
            consultingSessionExistInQuote = TRUE_STR;   // Set to true.
        }
        if(find(SiteReviewPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and siteReviewExistInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {     // If SiteReview PO exist. Added the action check for CSYS-46393 (ATG)
            siteReviewExistInQuote = TRUE_STR;  // Set to true.
        }
        if(find(SiteReviewElitePOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1 and siteReviewEliteExistInQuote == FALSE_STR AND assetAction <> TERMINATE_ACTION) {       // If SiteReviewElite PO exist. Added the action check for CSYS-46393 (ATG)
            siteReviewEliteExistInQuote = TRUE_STR; // Set to true.
        }

        if(find(unitBasedPOs,TILDE_DELIMITER+poID+TILDE_DELIMITER) > -1) {      // If this is a unit based recurring fee product
            utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, IS_UNITBASED, TRUE_STR);
        }
        /* End BM_VT 07/05/2012 */
		
		
		/* Populate containers for relating line items to the parent Model  */
        if (parentDocNum <> "") {
            utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, PARENT_DOC_NUM, parentDocNum);
			//IESCNQRCPQ-1135- Set config service transaction number
			if(poID == "9451097"){
				utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, TRANXCS, string(trxnsCS));
			}
			//IESCNQRCPQ-1135- End
            //Populate the implementationMethod
            modelImplementationMethod = util.getStringAttribute(stringsDict, parentDocNum, DELIMITER, CONFIG_IMPLEMENTATION_METHODS);
            // Required for Promotion
            append(implementationMethodArr, modelImplementationMethod);
			//add on related ,added if inorder to omitt promotions for NONE Line items
            //CSYS-99236
            if(/*assetAction <> NONE_ACTION AND assetAction <> MODIFY_ACTION AND*/ assetAction <> TERMINATE_ACTION){
                append(partNumArr, pi);
                //put(stringsDict, pi, assetAction);
                if(assetAction <> CREATE_ACTION){
                    utilResultFlag = util.putStringAttribute(stringsDict, pi, DELIMITER, "partNumberNotValidForPromo", assetAction);
                }
            }
        }
		
		//CSYS-103884 NP 08/17/2021 Start
		//CSYS-104626 LIN 11-08-2021 -- Updated the asset action to include modify and none along with create.
		if(poID=="36309" AND assetAction <> TERMINATE_ACTION){
			pTECreateExists="true";
		}
		//CSYS-103884 End
		//IESCNQRCPQ-972 PG(10-08-2023) Start
		//6406 - Custom Connector - Hosted - 1 Connector or 5983963 - Custom Connector - Hosted for Invoice Processing
		//514728 & 514745 - Concur Financial Connector - 2 & 3 Connectors
		//8910, 8917, 8924 & 8931 are not valid values for _part_custom_field1 in the parts file 7-1-2024 TJG
		if((poID == "6406" OR poID == "5983963" OR poID == "8910" OR poID == "8917" OR poID == "8924" OR poID == "8931") AND assetAction <> TERMINATE_ACTION){
			cCHexists="true";
		}
		//IESCNQRCPQ-972 PG(10-08-2023) End
		//IESCNQRCPQ-1882 TJG(6-26-2024) Start
		//Concur Detect by Oversight - Special Edition
		if(poID == "7526941" AND assetAction <> TERMINATE_ACTION){
			detectOversightSpecialEditionExists="true";
		}
		//Custom Payment Extract or Extended Services Advisory Support
		if((poID == "8194288" OR poID == "228") AND assetAction <> TERMINATE_ACTION){
			payExtractOrESASExists="true";
		}
		//IESCNQRCPQ-1882 TJG(6-26-2024) End
		//IESCNQRCPQ-177- Start - LIN -03-08-2023 -- Checking if extract service is present on the quote.
		if(poID =="3722373" AND assetAction <> TERMINATE_ACTION AND quoteType_quote == ADD_ON){
			extractServiceExist=true;
		}
		//IESCNQRCPQ-177- End
		//CSYS-107087 (OK. 20-09-2022) Added below code to pull the values in "calculatePromotion" function
		utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, "piItemType_line", piItemType );
		utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, "quoteCurrency_quote", quoteCurrency_quote);
		
	} else {
		modelImplementationMethod = util.getConfigValue(configAttrInfo, CONFIG_IMPLEMENTATION_METHODS);
        // LFodge,  00100538
        modelPoPriority = util.getConfigValue(configAttrInfo, MODEL_PO_PRIORITY );
		//CSYS-106562, (LIN, 07/19/22) Added below code to pull the value of Billing Counter from configuration & pass in stringsDict to be used in getPartFields util library
		billingCounter = getconfigattrvalue(docNum, "billingCounter_concur");
		quoteType = quoteType_quote;
		uqgNB = line.usageQualificationGroup_line;
		//CSYS-106563 - start
		if((isnull(billingCounter) OR billingCounter == "") AND quoteType == ADD_ON){
			billingCounter = util.getStringAttribute(stringsDict, docNum, DELIMITER, BillingCounterAddOn); 
		}
		if(billingCounter <> "" AND ownerMarket_quote =="Japan"){
			utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, BILLING_COUNTER, billingCounter );
		}
		//CSYS-106563 - end
		utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, QUOTE_TYPE, quoteType_quote);
		//CSYS-106562 - End		 
        //Added by Andre Lancour for Case 119146
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, MODEL_PO_PRIORITY, modelPoPriority );
        utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, CONFIG_IMPLEMENTATION_METHODS, modelImplementationMethod);
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, MODEL_HAS_GROUPING, FALSE_STR );
        coreOffering = util.getConfigValue( configAttrInfo, CONFIG_CORE_OFFERING );
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, CORE_OFFERING, coreOffering );
        //BI = util.getConfigValue( configAttrInfo, "businessIntelligence_concur" ); //Oracle didn't update this to their new attr created in the UI/UX overhaul, so rewriting to the line below:
        //BI = util.getConfigValue( configAttrInfo, "businessIntelligenceSSM_concur" ); //uses new config attr
        /*
        if(BI<>""){
            put(modelContainsBI,docNum,TRUE_STR);
        }
        */
        if(coreOffering <> "") {
            append(listOfCore,coreOffering);
            append(listOfIM,modelImplementationMethod);
        }

        //add on related - start
        //append(parentDNarray,docNum);
        //add selected service ID to string:
        configuredAssetsService = configuredAssetsService + "!^!" + util.getConfigValue(configAttrInfo, "currentAssetSAId_concur");
        //add on related - end

        modelName = modelNameFromGrid;
        modelDesc = "Concur " + modelName + " " + coreOffering + " - " + modelImplementationmethod + " Implementation";
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, PO_NAME, modelDesc );
        
        // CSYS-98942 MJ, give product number quantity of 1 so it can be added to favorites
		utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, "_price_quantity", 1);
	}
    /* case 85005 May 14 2012*/
    utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, IMPLEMENTATION_METHOD, modelImplementationMethod);
	
	/*CSYS-103355 (OK. 7-26-2021) Start : Eligible customers for "INVACHMIGRATEWAIVER" promo listed in AccountIdBasedPromo table 
	Invoice Check Payments - 566  - poid
	Invoice Check Payments - Canada  - 416635  - poid
	*/
	/*CSYS-106955 (OK. 8-19-2022) Comment out the code related to "INVACHMIGRATEWAIVER" promotion
									  
																						
	if(quoteType_quote == ADD_ON){
		if ((poID == "566" OR poID == "416635") AND assetAction == CREATE_ACTION) {
			for res in promoRecords {
				accountId = get(res, "accountId");
				availability = get(res, "availability");
				promoCode = get(res, "promoCode");
				
				if (customer_ID_BACK == accountId AND availability == "TRUE" AND promoCode == "INVACHMIGRATEWAIVER") {
					put(stringsDict, "INVACHMIGRATEWAIVERPromoCheck", TRUE_STR);
				}
			}
		}
	}*/
	//CSYS-103355 - End
	
	//IESCNQRCPQ-660 (OK. 5-19-2023) Set isExistingAsset_line flag to true when the pi in asset string
	if (findinarray(assetPiIdArray, pi) <> -1) {
		utilResultString = util.formAttrValueStr(attributesDict, "isExistingAsset_line", docNum, TRUE_STR);
	}
	
	//IESCNQRCPQ-1060  VK Checking if Concur Request Standalone or Concur Request Add-on are available for Selecting the Advconfigtraining SKU
	if((poID == "791" AND assetAction <> "TERMINATE") OR (poID == "880" AND assetAction <> "TERMINATE")){
       		isConcurRequestPresent = true;
       	}
       	
    if(poID == "11062209" AND assetAction <> "TERMINATE"){
       		isAdvConfigTrainingConcurRequestPresent = true;
    }
	
	//IESCNQRCPQ-1174 VK - Checking if SAP Integration and SAP Integration for Funds and Grants Management SKUs are present in the quote

		if(poID == "11172312" AND assetAction == "CREATE"){
			sAPIntegrationForFG = true;
		}
		
		if(poID == "2538763" AND assetAction == "CREATE"){
			sAPIntegration = true;
		}
//IESCNQRCPQ-1174 - End

	//IESCNQRCPQ-1139 VK - start

	if((poID == "2653360" AND assetAction <> "TERMINATE") OR (poID == "8384461" AND assetAction <> "TERMINATE")){
		expensePaySKUsExist = true;
	}
	
	if(poID == "11073762" AND assetAction == "CREATE"){
		expensePaymentManagerExists = true;
	}
	//IESCNQRCPQ-1139 VK - End

 
}

if(isAdvConfigTrainingConcurRequestPresent AND NOT isConcurRequestPresent ){
	utilResultString = util.formAttrValueStr(attributesDict, "advancedConfigurationTrainingConcurRequest_quote", QUOTE_DOC_NUM, TRUE_STR);
}
else{
	utilResultString = util.formAttrValueStr(attributesDict, "advancedConfigurationTrainingConcurRequest_quote", QUOTE_DOC_NUM, FALSE_STR);
}
//IESCNQRCPQ-1060 VK END

	//IESCNQRCPQ-1596 - LIK - Assinging autoGenerateConttract menu attribute to text attribute.
	utilResultString = util.formAttrValueStr(attributesDict, "autoGenerateContractText_quote_c", QUOTE_DOC_NUM, autoGenContract);

//IESCNQRCPQ-1174 VK Start
	if(sapIntegrationForFG == true AND sapIntegration == false){
		utilResultString = util.formAttrValueStr(attributesDict, "sAPIntegrationForFundsAndGrantsManagement_quote", QUOTE_DOC_NUM, TRUE_STR);
	}
	
	else{
		utilResultString = util.formAttrValueStr(attributesDict, "sAPIntegrationForFundsAndGrantsManagement_quote", QUOTE_DOC_NUM, FALSE_STR);
	}
//IESCNQRCPQ-1174 VK End

//IESCNQRCPQ-1139 VK Start
	if(expensePaySKUsExist AND expensePaymentManagerExists){
		utilResultString = util.formAttrValueStr(attributesDict, "expensePaymentManager_quote", QUOTE_DOC_NUM, TRUE_STR);
	}
	
	else{
		utilResultString = util.formAttrValueStr(attributesDict, "expensePaymentManager_quote", QUOTE_DOC_NUM, FALSE_STR);
	}
	
//IESCNQRCPQ-1139 VK End


/*IESCNQRCPQ-231 (LBN. 01/17/2023)
if(timeAndMaterialsImplementation_quote == true and implementationMethods_quote == "Professional"){
	put(stringsDict, "premiumEdition", TRUE_STR);
}

if(timeAndMaterialsImplementation_quote == false and implementationMethods_quote == "Professional"){
	put(stringsDict, "professionalEdition", TRUE_STR);
}*/
//IESCNQRCPQ-231 END

//CSYS-107751 (OK. 1-6-2023) When SAP CoE Approved, display the new MOVE23 promotions. otherwise hide the promos. 
//IESCNQRCPQ-978 (OK. 8-18-2023) Updated the below condition with mOVE23Conversion_quote. 
if (sAPCoEApproval_quote <> "Approved" AND mOVE23Conversion_quote <> "true") {
	put(stringsDict, "SAPCoENotApproved", TRUE_STR);
}

//IESCNQRCPQ-978 (OK. 8-18-2023) When the conversion flag is true in the opportunity set the sAPCoEApproval_quote to approved 
if (mOVE23Conversion_quote == "true") {
	utilResultString = util.formAttrValueStr(attributesDict, "sAPCoEApproval_quote", QUOTE_DOC_NUM, "Approved");
}

utilResultString = util.formAttrValueStr(attributesDict, "configuredAssets_quote", QUOTE_DOC_NUM, configuredAssetsService);
utilResultString = util.formAttrValueStr(attributesDict, "pTECreateExists_quote", QUOTE_DOC_NUM, pTECreateExists);
utilResultString = util.formAttrValueStr(attributesDict, "cCHexists_quote", QUOTE_DOC_NUM, cCHexists); //IESCNQRCPQ-972 PG(10-08-2023)
utilResultString = util.formAttrValueStr(attributesDict, "detectOversightSpecialEditionExists_quote_c", QUOTE_DOC_NUM, detectOversightSpecialEditionExists); //IESCNQRCPQ-1882 TJG(6-26-2024)
utilResultString = util.formAttrValueStr(attributesDict, "payExtractOrESASExists_quote_c", QUOTE_DOC_NUM, payExtractOrESASExists); //IESCNQRCPQ-1882 TJG(6-26-2024)

//for CSYS 37711 part 3
baseCnt = 0;
incToBaseDict = dict("string");
for basePi in baseArray {
    put(incToBaseDict, basePi, incArray[baseCnt]);
    baseCnt = baseCnt + 1;
}
//CSYS-100479; just re-populating the existing attribute to ensure continuity after library invocation.  
if (containskey(stringsDict, "bundleIsModify")){
	if (get(stringsDict, "bundleIsModify") == TRUE_STR){
		bundleIsModify = true;
	}
	else{
		bundleIsModify = false;
	}
}

if (containskey(attributesDict, "tierChange_quote")){
	quoteTierChange = get(attributesDict, "tierChange_quote");
}
if(containskey(stringsDict, "strImpMethod")){
	strImpMethod = get(stringsDict, "strImpMethod");
}
if(containskey(floatsDict, "QUOTE_TOTAL_EXISTING_ARR")){
	QUOTE_TOTAL_EXISTING_ARR = get(floatsDict, "QUOTE_TOTAL_EXISTING_ARR");
}

//CSYS-75571 (KA. 1-19-2017):
//The purpose of the next 2 dictionaries is to solve docNum sorting discrepancies spawned from core/edition change in config:
modelToLineDocNumsDictCustom = dict("string[]");
modelToLinePartNumsDictCustom = dict("string[]");
sortModelDicts = util.sortModelToLineDictionaries(modelToLineDocNumsDictCustom, modelToLinePartNumsDictCustom, seqNumArray, seqNumAttributeMappingDict);

//set the modeltoLine dictionaries to the new dictionaries built in the setModelDicts util library,
//only if the util succeeded in populating the new dictionaries:
if(sortModelDicts == "EXECUTED"){
    modelToLineDocNumsDict = modelToLineDocNumsDictCustom;
    modelToLinePartNumsDict = modelToLinePartNumsDictCustom;
}
//CSYS-75571 END

// *************** Reorganize the line items based on config data ***************
docNumList = util.sortLineItems( stringsDict, integersDict, floatsDict, docNumlist );

//capture data for Monthly Transactions Validation Rule
rez = BMQL("SELECT PO FROM trnsValidation WHERE PO in $fullPOlist");
listOfFixedTransactionNum = string[];
for entry in rez{
    append(listOfFixedTransactionNum,get(entry,"PO"));
}
utilResultDict = util.getPartFields(piList, CUSTOM_FIELD_DICT, stringsDict, DELIMITER);

/* ***************** CALCULATE NEW TRANSACTIONS ****************
This is used to update the transactions of all line items after the initial information gathering process.*/
utilResultString = util.updateTransactionsAfterAttributeGathering(stringsDict, integersDict, floatsDict, overwriteTransactionArr, piDict, incrementalFeeTransactionDict, billingCycleNumber, QUOTE_TRANSACTIONS, quoteType_quote, oRGNumberOfComittedTransactions_quote, triggerDict);

//Setup Only detection
addonHasSetup = false;
ignoreSetupCheck = false;
arrInvolved = false;
ignoreNonModifySetupCheck = false;//CSYS-99043

//CSYS-95378
addonHasExtServ = false;
ignoreExtServCheck = false;

//TandM_BillingExceptionNotes = "";

// add on related Generate values for ramp plans and re-evaluate actions

for docNum in docNumlist{
    //first thing - evaluate if a change is needed with the action:
    parentDocNum = util.getStringAttribute(stringsDict, docNum, DELIMITER, PARENT_DOC_NUM);
    actionSwitch = util.getStringAttribute(stringsDict, parentDocNum, DELIMITER, "assetGroupMappingDict");
    currentAction = util.getStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION);
    isGrouped = util.getStringAttribute( stringsDict, docNum, DELIMITER, IS_GROUPED);
    poID = util.getStringAttribute(stringsDict, docNum, DELIMITER, PO_ID );
    itemType = util.getStringAttribute( stringsDict, docNum, DELIMITER, PI_ITEM_TYPE );
    //poCategory = util.getStringAttribute( stringsDict, docNum, DELIMITER, PO_CATEGORY + "***" );
    poCategory = util.getStringAttribute(stringsDict, docNum, DELIMITER, PO_CATEGORY);//CSYS-88632
    isCoreChanged = get(isCoreChangedDict, parentDocNum); //grab the result of core change detection
    isEditionChanged = get(isEditionChangedDict, parentDocNum); //grab the result of edition change detection
    assetAction = util.getStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION);
    isFirstIteration = util.getStringAttribute(stringsDict, docNum, DELIMITER, "isFirstIteration_line");
    pricebookChangeDetected = util.getStringAttribute(stringsDict, docNum, DELIMITER, "pricebookChange_line");
    pi = util.getStringAttribute( stringsDict, docNum, DELIMITER, PART_NUM );//CSYS-95591
    productFamily = util.getStringAttribute(stringsDict, pi, DELIMITER, PRODUCT_FAMILY);//CSYS-87106; CSYS-95591
	trxnsCSDoc = util.getStringAttribute(stringsDict, docNum, DELIMITER, TRANXCS);
    reconfig = get(stringsDict, "reconfigure"); //prevent runtime error
	billingCounter = util.getStringAttribute( stringsDict, parentDocNum, DELIMITER, BILLING_COUNTER); //CSYS-106562																											
	if(billingCounter == "Expense User Based"){	
		utilResultString = util.formAttrValueStr(attributesDict, "billingCounter_line", docNum, billingCounter);
	}
	else{
		utilResultString = util.formAttrValueStr(attributesDict, "billingCounter_line", docNum, billingCounter);
	}
	//CSYS-106562 - End	
    //CSYS-93972 (LN. 12-5-2018) Populate the Audit 48 Hour SLA for Policy/Receipt Audit to match the TRXN count of Policy/Receipt Audit
    if( (poID == AUDIT_48_HOUR_POLICY_AUDIT_PO OR poID == AUDIT_48_HOUR_RECEIPT_AUDIT_PO) AND itemType <> INCREMENTAL_FEE AND assetAction <> TERMINATE_ACTION AND containskey(integersDict, parentDocNum + DELIMITER + POLICY_RECEIPT_AUDIT_TRXN_COUNT)){
        trxns = get(integersDict, parentDocNum + DELIMITER + POLICY_RECEIPT_AUDIT_TRXN_COUNT);

        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, trxns);
    }
    //CSYS-100418 (SV. 17-09-2020) Populate the Add-on Historical Tax Reclaim to match the TRXN count of Concur Tax Assurance by VATBox
    //CSYS-100822 (SV. 19-10-2020)Modified the if conditon to add the POID of Add-On Reclaim and Optimization
    if( (poID == ADDON_HISTORICAL_TAX_RECLAIM_PO OR poID == ADDON_RECLAIM_AND_OPTIMIZATION_PO) AND itemType <> INCREMENTAL_FEE AND assetAction <> TERMINATE_ACTION AND containskey(integersDict, parentDocNum + DELIMITER + CONCUR_VATBOX_TRXN_COUNT)){
        trxns = get(integersDict, parentDocNum + DELIMITER + CONCUR_VATBOX_TRXN_COUNT);

        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, trxns);
    }
    //CSYS-100418 End
    //CSYS-100552 (SV. 21-09-2020) Populate the Tap to Expense to match the TRXN count of Japan Public Transport
    if( poID == TAP_TO_EXPENSE_PO AND itemType <> INCREMENTAL_FEE AND assetAction <> TERMINATE_ACTION AND containskey(integersDict, parentDocNum + DELIMITER + JAPAN_PUBLIC_TRANSPORT_TRXN_COUNT)){
        trxns = get(integersDict, parentDocNum + DELIMITER + JAPAN_PUBLIC_TRANSPORT_TRXN_COUNT);

        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, trxns);
    }
    //CSYS-100552 End
    
    //CSYS-104811 Start (PG. 21-12-2021) Populate the Intelligent Audit - Essentials Edition - Expedited Service Add-on to match the TRXN count of Intelligent Audit - Essentials
    if( poID == INTELLIGENT_AUDIT_ESSENTIALS_EDITION_EXPEDITED_SERVICE_ADDON_PO AND itemType <> INCREMENTAL_FEE AND assetAction <> TERMINATE_ACTION AND containskey(integersDict, parentDocNum + DELIMITER + INTELLIGENT_AUDIT_ESSENTIALS_TRXN_COUNT)){
        trxns = get(integersDict, parentDocNum + DELIMITER + INTELLIGENT_AUDIT_ESSENTIALS_TRXN_COUNT);

        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, trxns);
    }
    //CSYS-104811 End
    
    //CSYS-104818 Start (PG. 21-12-2021) Populate the Intelligent Audit - Advanced Edition - Expedited Service Add-on to match the TRXN count of Intelligent Audit - Advanced
    if( poID == INTELLIGENT_AUDIT_ADVANCED_EDITION_EXPEDITED_SERVICE_ADDON_PO AND itemType <> INCREMENTAL_FEE AND assetAction <> TERMINATE_ACTION AND containskey(integersDict, parentDocNum + DELIMITER + INTELLIGENT_AUDIT_ADVANCED_TRXN_COUNT)){
        trxns = get(integersDict, parentDocNum + DELIMITER + INTELLIGENT_AUDIT_ADVANCED_TRXN_COUNT);

        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, trxns);
    }
    //CSYS-104818 End

    if(isFirstIteration == TRUE_STR AND reconfig == FALSE_STR AND assetAction == CREATE_ACTION AND quoteType_quote == "Add-On Business"){

        myTrxns = get(stringsDict, "originalTrans");
        if (isnumber(myTrxns)){
            utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, atoi(myTrxns));
        }
    }

    if(isFirstIteration == TRUE_STR AND reconfig == FALSE_STR AND assetAction == MODIFY_ACTION AND quoteType_quote == "Add-On Business"){
        myTrxns = get(stringsDict, docNum + "currentAssetTrxns");
        if (isnumber(myTrxns)){
            utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, atoi(myTrxns));
        }
    }
	//IESCNQRCPQ-164 - Defaulting the qty to 1 for configuration services
	if(itemType == "Base" AND assetAction == CREATE_ACTION AND poID == "9451097" AND isFirstIteration == TRUE_STR){
		trxns = 1;
		utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, trxns);
	}
	if(itemType == "Base" AND assetAction == CREATE_ACTION AND poID == "9451097" AND trxnsCSDoc == "1" AND quoteType_quote == "New Business"){
		trxns = 1;
		utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS, trxns);
	}
	//IESCNQRCPQ-164 - End
	
    if(actionSwitch <> "none"){//if a change is needed: add on related
        if(currentAction == NONE_ACTION AND (actionSwitch == "all" OR (actionSwitch == "group" and isGrouped == TRUE_STR))) {
            currentAction = MODIFY_ACTION;//change the action to MODIFY
            utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER,ASSET_ACTION,currentAction);//and store the new value
            put(stringsDict, poID + DELIMITER + "itemTypeActionSync" + DELIMITER + itemType, MODIFY_ACTION);
        }
    }

    //CSYS-92516 (LN. 8-27-2018) Fixing the issue for Add-ons, when one item in a bundle changes, the entire bundle must equal MODIFY
    if( currentAction == NONE_ACTION AND bundleIsModify AND isGrouped == TRUE_STR AND containskey(stringsDict, parentDocNum + DELIMITER + "bundleIsModify")) {
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION, MODIFY_ACTION);//and store the new action code of MODIFY
        put(stringsDict, poID + DELIMITER + "itemTypeActionSync" + DELIMITER + itemType, MODIFY_ACTION);
    }

    if(currentAction <> TERMINATE_ACTION AND currentAction <> CREATE_ACTION AND containskey(stringsDict, poID + DELIMITER + "itemTypeActionSync" + DELIMITER + BASE_FEE) ){

        if(containskey(stringsDict, poID + DELIMITER + "itemTypeActionSync" + DELIMITER + INCREMENTAL_FEE)){

            baseAction = get(stringsDict, poID + DELIMITER + "itemTypeActionSync" + DELIMITER + BASE_FEE);
            incAction = get(stringsDict, poID + DELIMITER + "itemTypeActionSync" + DELIMITER + INCREMENTAL_FEE);

            if(baseAction == NONE_ACTION AND incAction == NONE_ACTION){
                currentAction = NONE_ACTION; //change the action to NONE
            }
            else{
                currentAction = MODIFY_ACTION; //change the action to MODIFY
            }

        }
        else {//CSYS-85237 (LN. 10/20/2017) (deals with products that have a base fee but no inc fee):

            baseAction = get(stringsDict, poID + DELIMITER + "itemTypeActionSync" + DELIMITER + BASE_FEE);

            if(baseAction == NONE_ACTION){
                currentAction = NONE_ACTION; //change the action to NONE
            }
            else{
                currentAction = MODIFY_ACTION; //change the action to MODIFY
            }

        }

        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION, currentAction ); //and store the new value
    }

    //CSYS-65212: Overwrite action code for Invoice Check Payments to set it back to NONE (if applicable). KA. 8-30-2016.
    if(currentAction <> TERMINATE_ACTION AND currentAction <> CREATE_ACTION and
        containskey(stringsDict, poID + DELIMITER + "InvoiceCheckPaymentsActionSync" + DELIMITER + BASE_FEE) AND
        containskey(stringsDict, poID + DELIMITER + "InvoiceCheckPaymentsActionSync" + DELIMITER + INCREMENTAL_FEE)){

        baseAction = get(stringsDict, poID + DELIMITER + "InvoiceCheckPaymentsActionSync" + DELIMITER + BASE_FEE);
        incAction = get(stringsDict, poID + DELIMITER + "InvoiceCheckPaymentsActionSync" + DELIMITER + INCREMENTAL_FEE);

        if(baseAction == NONE_ACTION AND incAction == NONE_ACTION){
            currentAction = NONE_ACTION; //change the action to NONE
        }
        else{
            currentAction = MODIFY_ACTION; //change the action to MODIFY
        }

        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER,ASSET_ACTION,currentAction); //and store the new value
    }
    // end add on logic

    lineItemRampPlan = "";
    transArr = String[];
    fromNodeArr = String[];
    toNodeArr = String[];
    fromNodeStr = ""; // Use *.* delimiter to separate different from entries
    toNodeStr = ""; // Use *.* delimiter to separate different to entries
    rampPlanOverride = util.getStringAttribute(stringsDict, docNum, DELIMITER, RAMP_PLAN_OVERRIDE);
    rampFlag = util.getStringAttribute( stringsDict, pi, DELIMITER, RAMP_FLAG );
    utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, RAMP_FLAG, rampFlag );
    lineItemRampPlan = util.getStringAttribute(stringsDict, docNum, DELIMITER, RAMP_PLAN_DETAIL);

    //CSYS-88632 Part 2 of 3 START (LN. 2/19/2018)
    if(poCategory == CORE_SERVICE){
        //if there is a tier increase at the parentDocNum continue
        if(containskey(CORE_TIER_INCREASE, parentDocNum + DELIMITER + "coreTierIncrease_line")){
            //if the parentDocNum is not currently present in the tierIncreaseArray, add it to the array
            if(findinarray(tierIncreaseArray, parentDocNum) == -1){
                append(tierIncreaseArray, parentDocNum);
            }

        }
        //if there is a tier increase at the parentDocNum continue
        if(containskey(CORE_TIER_DECREASE, parentDocNum + DELIMITER + "coreTierDecrease_line") ){
            //if the parentDocNum is not currently present in the tierDecreaseArray, add it to the array
            if(findinarray(tierDecreaseArray, parentDocNum) == -1){
                append(tierDecreaseArray, parentDocNum);
            }
        }
    }
    //CSYS-88632 Part 2 of 3 END

    if (rampPlanOverride <> TRUE_STR OR lineItemRampPlan == "") {

        lineItemRampPlan = QUOTE_LEVEL_RAMP_PLAN;
        trxnCount = util.getIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS);

        newTransactionValues = util.getNewTransactionValues(QUOTE_RAMP_PLAN_TRANSACTION_RATIOS, trxnCount);

        //CSYS-70410 (KA. 1-10-2017): correct the ramp plan transactions if necessary:
        //CSYS-102156 TJG 06142021
	if(purchasedFromPartnerSFDC_quote <> "" AND purchasedFromPartnerCategorySFDC_quote == "BPO"){
		minTrans = 5;	}
	else {	minTrans = 10;	}
	
        if( NOT isempty(newTransactionValues) ){
            transCnt = 0; //index of the value in the array
            for transValue in newTransactionValues {
                if( isNumber(transValue) ){
                    //CSYS-102156 TJG 06142021
                    //if(trxnCount < 10){ //if less than 10 transactions is committed to this product on the grid
                    if(trxnCount < minTrans){ //if less than minTrans is committed to this product on the grid
                        newTransactionValues[transCnt] = string(trxnCount); //set to line transactions
                    }
                    //CSYS-102156 TJG 06142021
                    //elif( atoi(transValue) < 10 ){ //if less than 10 transactions is NOT committed to this product on the the grid AND the ratio affected value is below 10 (usually this will be a multi-core scenario)
                    elif( atoi(transValue) < minTrans){ //if less than 10 transactions is NOT committed to this product on the the grid AND the ratio affected value is below 10 (usually this will be a multi-core scenario)
                        newTransactionValues[transCnt] = quoteRampTransactionStrings[transCnt]; //set to quote ramp plan transactions
                    }
                    transCnt = transCnt + 1;
                }
            }
        }
        //END CSYS-70410

        transArr = newTransactionValues;

        transString = join( transArr, DELIMITER );
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, TRANS_STRING, transString );

        newLineItemRampPlan = util.spliceXMLNodeValuesExtended(lineItemRampPlan, TRANSACTION_XML_NODE_NAME, newTransactionValues, RAMP_PARENT_NODE);
        fromNodeArr = util.getXMLNodeValues(lineItemRampPlan, "from");

        for fromNode in fromNodeArr {
            fromNodeStr = fromNodeStr + fromNode + "*.*";
        }

        toNodeArr = util.getXMLNodeValues(lineItemRampPlan, "to");

        for toNode in toNodeArr {
            toNodeStr = toNodeStr + toNode + "*.*";
        }

        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, FROM, fromNodeStr );
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, TO, toNodeStr );
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, RAMP_PLAN_DETAIL, newLineItemRampPlan );
        utilFlagResult = util.putStringAttribute( stringsDict, docNum, DELIMITER, RAMP_PLAN_DETAIL_SAVE_XML, newLineItemRampPlan );
    } else {
        if (rampFlag == PCF_YES and rampPlanOverride == TRUE_STR) {
            // If we override the ramp plan, it needs to stay exactly the same except for its final value, that must be the number of transactions.
            lineItemRampPlan = util.getStringAttribute(stringsDict, docNum, DELIMITER, RAMP_PLAN_DETAIL);
            lineRampPlanTransactionString = util.getXMLNodeValues(lineItemRampPlan, "transactions");    //This will be a string array, e.g. ["100", "200", "300", "400", "500"]
            trxnCount = util.getIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS);
            //Change the highest value to the number of transactions.
            highestTransactionIndex = sizeofarray( lineRampPlanTransactionString ) - 1;

            if ( highestTransactionIndex >= 0 ){
                lineRampPlanTransactionString[highestTransactionIndex] = string(trxnCount);
            }

            lineRampFromMonths = util.getXMLNodeValues(lineItemRampPlan, FROM); //This will be a string array, e.g. ["1", "2", "3"]
            utilResultString = util.formAttrValueStr(attributesDict, LINE_RAMP_FROM_MONTHS, docNum, join( lineRampFromMonths, DELIMITER )); //ramp delete integration upgrade. KA 10-5-15

            //CSYS-86115 (parse any user-entered Base Fee Net/Inc Fee Net prices. KA. 10-16-2017):
            //CSYS-95895
            //if(actionName <> "revise"){
                userBaseFeeNetArr = util.getXMLNodeValues(lineItemRampPlan, "baseFeeNet");
                userIncreFeeNetArr = util.getXMLNodeValues(lineItemRampPlan, "increFeeNet");
                rampIndex = 0;

                for eachBaseFeeNet in userBaseFeeNetArr{
                    eachBaseFeeNet = eachBaseFeeNet;
                    
                    if(find(eachBaseFeeNet, " ") <> -1){
                        eachBaseFeeNet = replace(eachBaseFeeNet, " ", "");
                    }
                    //CSYS-99592 (O.C. 6-10-2020)  Resolve CHF User Definied Ramp Pricing
                    if(find(eachBaseFeeNet, "'") <> -1){
                        eachBaseFeeNet = replace(eachBaseFeeNet, "'", "");
                    }

                    if(isNumber(replace(eachBaseFeeNet, ",", ""))){
                        //CSYS-97407 (LN. 12-11-2019) Ensure that those BRL/EUR/CHF Currencies format correctly
                        //CSYS-98706 (OC. 05-01-2020) DKK/NOK/SEK currency formats
                        // DKK  kr 1.234,12
                        // NOK  kr 1 234,12
                        // SEK  1 234,12 kr 
                        eachBaseFeeNetFormatted = "";
                        if(quoteCurrency_quote == "BRL" OR quoteCurrency_quote == "EUR" OR quoteCurrency_quote == "DKK" OR quoteCurrency_quote == "NOK" OR quoteCurrency_quote == "SEK"){

                            eachBaseFeeNetFormat = eachBaseFeeNet;
                            if(find(eachBaseFeeNet, ".") <> -1){
                                eachBaseFeeNetFormat = replace(eachBaseFeeNet, ".", "");
                            }
                            if(find(eachBaseFeeNet, " ") <> -1){
                                eachBaseFeeNetFormat = replace(eachBaseFeeNetFormat, " ", "");
                            }
                            eachBaseFeeNetFormatted = replace(eachBaseFeeNetFormat, ",", ".");
                        }
                        else {
                            eachBaseFeeNetFormatted = replace(eachBaseFeeNet, ",", "");
                        }

                        //this will be used in calculateUnifiedPricing and calculateProdBasedPricing util libraries:

                        if(quoteCurrency_quote <> "USD"){//CSYS-95310 (L.N. 6-24-2019) Reverse Currency Conversion to get User Entered Pricing in USD and then trickle through Pricing as expected.
                            put(floatsDict, docNum + RAMP_DELIMITER + string(rampIndex) + DELIMITER + "userBaseFeeNet", atof(eachBaseFeeNetFormatted));
                            conversionResult = util.convertDictCurrency( floatsDict, docNum + RAMP_DELIMITER + string(rampIndex), DELIMITER, "userBaseFeeNet", 1/conversionRate, 7 );

                            eachBaseFeeNetFormatted = string(round(get(floatsDict, docNum + RAMP_DELIMITER + string(rampIndex) + DELIMITER + "userBaseFeeNet"), 7));//Decimal Precision
                        }

                        put(floatsDict, docNum + RAMP_DELIMITER + string(rampIndex) + DELIMITER + "userBaseFeeNet", atof(eachBaseFeeNetFormatted));

                    }

                    rampIndex = rampIndex + 1;
                }
                rampIndex = 0;
                for eachIncFeeNet in userIncreFeeNetArr{
                    eachIncFeeNet = eachIncFeeNet;

                    if(find(eachIncFeeNet, " ") <> -1){
                        eachIncFeeNet = replace(eachIncFeeNet, " ", "");
                    }
                    //CSYS-99592 (O.C. 6-10-2020)  Resolve CHF User Definied Ramp Pricing
                    if(find(eachIncFeeNet, "'") <> -1){
                        eachIncFeeNet = replace(eachIncFeeNet, "'", "");
                    }
                    
                    if(isNumber(replace(eachIncFeeNet, ",", ""))){
                        //CSYS-97407 (LN. 12-11-2019) Ensure that those BRL/EUR/CHF Currencies format correctly
                        //CSYS-98706 (OC. 05-01-2020) DKK/NOK/SEK currency formats
                        // DKK  kr 1.234,12
                        // NOK  kr 1 234,12
                        // SEK  1 234,12 kr  
                        eachIncFeeNetFormatted = "";
                        if(quoteCurrency_quote == "BRL" OR quoteCurrency_quote == "EUR" OR quoteCurrency_quote == "DKK" OR quoteCurrency_quote == "NOK" OR quoteCurrency_quote == "SEK"){
                            //eachInFeeNetFormat = replace(replace(eachIncFeeNet, ".", ""), " ", "");
                            
                            eachInFeeNetFormat = eachIncFeeNet;
                            if(find(eachIncFeeNet, ".") <> -1){
                                eachInFeeNetFormat = replace(eachIncFeeNet, ".", "");
                            }
                            if(find(eachIncFeeNet, " ") <> -1){
                                eachInFeeNetFormat = replace(eachInFeeNetFormat, " ", "");
                            }

                            eachIncFeeNetFormatted = replace(eachInFeeNetFormat, ",", ".");


                        }
                        else {
                            eachIncFeeNetFormatted = replace(eachIncFeeNet, ",", "");
                        }
                        //this will be used in calculateUnifiedPricing and calculateProdBasedPricing util libraries:

                        if(quoteCurrency_quote <> "USD"){//CSYS-95310 (L.N. 6-24-2019) Reverse Currency Conversion to get User Entered Pricing in USD and then trickle through Pricing as expected.
                            put(floatsDict, docNum + RAMP_DELIMITER + string(rampIndex) + DELIMITER + "userIncFeeNet", atof(eachIncFeeNetFormatted));
                            conversionResult = util.convertDictCurrency( floatsDict, docNum + RAMP_DELIMITER + string(rampIndex), DELIMITER, "userIncFeeNet", 1/conversionRate, 7 );

                            eachIncFeeNetFormatted = string(round(get(floatsDict, docNum + RAMP_DELIMITER + string(rampIndex) + DELIMITER + "userIncFeeNet"), 7));//Decimal Precision
                        }

                        put(floatsDict, docNum + RAMP_DELIMITER + string(rampIndex) + DELIMITER + "userIncFeeNet", atof(eachIncFeeNetFormatted));


                    }

                    rampIndex = rampIndex + 1;
                }
            //}

            transArr = lineRampPlanTransactionString;
            transString = join( transArr, DELIMITER );

            utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, TRANS_STRING, transString );
            newLineItemRampPlan = util.spliceXMLNodeValuesExtended(lineItemRampPlan, TRANSACTION_XML_NODE_NAME, lineRampPlanTransactionString, RAMP_PARENT_NODE);
            fromNodeArr = util.getXMLNodeValues(lineItemRampPlan, "from");

            for fromNode in fromNodeArr {
                fromNodeStr = fromNodeStr + fromNode + "*.*";
            }

            toNodeArr = util.getXMLNodeValues(lineItemRampPlan, "to");

            for toNode in toNodeArr {
                toNodeStr = toNodeStr + toNode + "*.*";
            }

            utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, FROM, fromNodeStr );
            utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, TO, toNodeStr );
            utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, RAMP_PLAN_DETAIL, newLineItemRampPlan);
            utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, RAMP_PLAN_DETAIL_SAVE_XML, newLineItemRampPlan);
        }
    }

    //CSYS-95500 (LN. 4-12-2019) First check to see if the Core Service has more than one ramp applied
    if(poCategory == CORE_SERVICE AND itemType == BASE_FEE AND currentAction <> TERMINATE_ACTION ){
        toNodeArr = split(util.getStringAttribute(stringsDict, docNum, DELIMITER, TO), "*.*");

        if(toNodeArr[0] <> "and beyond"){//More than one ramp is applied to the Core Service
            put(stringsDict, parentDocNum + DELIMITER + "coreServiceHasRampsApplied", TRUE_STR);

            if(rampPlanOverride == TRUE_STR){
                put(stringsDict, parentDocNum + DELIMITER + "coreServiceOverrideRampPlan", TRUE_STR);
            }
        }
    }

    //CSYS-44734 and CSYS-47536 (part 1)
    //CSYS-95378
    if(quoteType_quote == ADD_ON){
        if(currentAction == CREATE_ACTION){ //addon quote has a setup fee
            if (itemType == SETUP_FEE){
                addonHasSetup = true;
            }
            if(poCategory == EXT_SERVICE){
                addonHasExtServ = true;
            }
            //CSYS-98752
            if(poCategory == "Professional Service"){
                addonHasProfServ = true;
            }
        }
        //CSYS-99043
        if((itemType <> SETUP_FEE AND currentAction == CREATE_ACTION) OR currentAction == TERMINATE_ACTION){ //if there was anything else done to the quote besides just adding a setup fee
            ignoreNonModifySetupCheck = true;
        }
        if((itemType <> SETUP_FEE AND currentAction == CREATE_ACTION) OR currentAction == MODIFY_ACTION OR currentAction == TERMINATE_ACTION){ //if there was anything else done to the quote besides just adding a setup fee
            ignoreSetupCheck = true;
        }
        if((itemType <> SETUP_FEE AND poCategory <> EXT_SERVICE AND currentAction == CREATE_ACTION) OR currentAction == MODIFY_ACTION OR currentAction == TERMINATE_ACTION){
            ignoreExtServCheck = true;
        }
        //CSYS-98752
        if((poCategory <> "Professional Service" AND currentAction == CREATE_ACTION) OR currentAction == MODIFY_ACTION OR currentAction == TERMINATE_ACTION){ //if there was anything else done to the quote besides just adding a setup fee
            ignoreProfServCheck = true;
            nonProfServCreate = true;//(CSYS-100128 S.V 10-08-2020)
        }
        //(CSYS-100128 S.V 10-08-2020)
        if(poCategory == "Professional Service" AND currentAction == CREATE_ACTION){
	    append(ProfServOnlyArray, true);            
        }
    }

    //CSYS-44734 ARR check part 1
    if(itemType == BASE_FEE AND (currentAction == CREATE_ACTION OR currentAction == MODIFY_ACTION OR currentAction == TERMINATE_ACTION)){
        arrInvolved = true;
    }

    //Bundle Incremental fix part 1 for CSYS-39318. Part 2 is in calculateprodbasedpricing util.
    //This maps the asset action to each PI so we can see if the PI pulled from the productDependentPIs table is a TERMINATE on the grid
    //myPi = get(primeStringsDict, docNum + DOCNUM_DELIM + "_part_number");
    myPi = get(piDict, docNum);
    put(stringsDict, myPi + ACTION_DELIMITER, currentAction);

    //CSYS-95251 (LN. 5-2-2019)
    if(get(stringsDict, docNum + DELIMITER + ASSET_ACTION) == MODIFY_ACTION AND pricebookChangeDetected == TRUE_STR){
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, "pricebookChange_line", FALSE_STR);
    }

    //CSYS-97924 (MJ 1/13/2020)
    if(pi == PARTNER_EXPANSION_SKU_PI) {
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION, NONE_ACTION);   
    }
    
    //CSYS-98798 MJ 5/19/20
    if(pi == PARTNER_IMPLEMENTATION_PI) {
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION, NONE_ACTION);   
    }
	
	//CSYS-106018 (PG 28.04.2022)
    if(pi == PARTNER_MARKETPLACE_CONCUR_INTEGRATION_ADP_PI) {
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION, NONE_ACTION);   
    }

	//IESCNQRCPQ-725 - VK Added condition for Add-on Quotes
    if(pi == FINANCIAL_INTEGRATION_PROGRAM_PI AND quoteType_quote <> ADD_ON) {
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION, NONE_ACTION);   
    }
 
	//IESCNQRCPQ-768 PG (11/07/2023)
    if(pi == PARTNER_SANDBOX_INCLUDED_PI) {
        utilResultFlag = util.putStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION, NONE_ACTION);   
    }								   
																
    //CSYS-87106 (LN.1/2/2018) For Add-On's & Base Fee's if TERMINATE or CREATE store the Product Family at the PI (part number)
    //CSYS-95591 (LN. 8-16-2019) Pushing this logic further down to account for the correct setting of MODIFY action codes.
    if(quoteType_quote == ADD_ON AND itemType == BASE_FEE AND currentAction <> NONE_ACTION) {
        put(PRODUCT_FAMILY_DICT, productFamily + DELIMITER + currentAction + DELIMITER + pi, productFamily);
    }
}

//CSYS-88632 Part 3 of 3 START (LN. 2/19/2018)
tierInc = FALSE_STR;
tierDec = FALSE_STR;

//Evaluate the tierIncrease/DecreaseArrays, if there are values evaluate accordingly and write to the quote level attribute
if(sizeofarray(tierIncreaseArray) > 0){
    tierInc = TRUE_STR;
}
if(sizeofarray(tierDecreaseArray) > 0){
    tierDec = TRUE_STR;
}

utilResultString = util.formAttrValueStr( attributesDict, "tierIncrease_quote", QUOTE_DOC_NUM, tierInc);
utilResultString = util.formAttrValueStr( attributesDict, "tierDecrease_quote", QUOTE_DOC_NUM, tierDec);
//CSYS-88632 Part 3 of 3 END

//Update: commenting out until further notice due to biz requirement change.
/*TandM_BillingExceptionNotes = substring(TandM_BillingExceptionNotes, 0, -2); //trim the last comma and space
utilResultString = util.formAttrValueStr(attributesDict, "TandM_BillingExceptionNotes_quote", QUOTE_DOC_NUM, TandM_BillingExceptionNotes);*/

//CSYS-44734 and CSYS-47536 (part 2)
if(NOT ignoreSetupCheck AND addonHasSetup){
    utilResultString = util.formAttrValueStr(attributesDict, "setupOnlyFlag_quote", QUOTE_DOC_NUM, TRUE_STR);
    //CSYS-92409
    utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, "setupOnlyFlag_quote", TRUE_STR);
}
else{utilResultString = util.formAttrValueStr(attributesDict, "setupOnlyFlag_quote", QUOTE_DOC_NUM, FALSE_STR);
    utilResultString = util.formAttrValueStr(attributesDict, "pONumException_quote", QUOTE_DOC_NUM, "");} //blank out po exception field
//CSYS-95378
if(NOT ignoreExtServCheck AND (addonHasExtServ OR addonHasSetup)){
    utilResultString = util.formAttrValueStr(attributesDict, "extServOnlyFlag_quote", QUOTE_DOC_NUM, TRUE_STR);
    utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, "extServOnlyFlag_quote", TRUE_STR);
}
else{utilResultString = util.formAttrValueStr(attributesDict, "extServOnlyFlag_quote", QUOTE_DOC_NUM, FALSE_STR);
}
//CSYS-99043
billCycleChangeOnly = "false";
if(containskey(stringsDict, QUOTE_DOC_NUM + DELIMITER + "billingCycleChangeOnly")){
    billCycleChangeOnly = get(stringsDict, QUOTE_DOC_NUM + DELIMITER + "billingCycleChangeOnly");
}
if(addonHasSetup AND NOT ignoreNonModifySetupCheck AND billCycleChangeOnly == TRUE_STR){
    utilResultString = util.formAttrValueStr(attributesDict, "profServOnlyFlag_quote", QUOTE_DOC_NUM, TRUE_STR);
}
else{
    utilResultString = util.formAttrValueStr(attributesDict, "profServOnlyFlag_quote", QUOTE_DOC_NUM, FALSE_STR);
}
//(CSYS-100128 S.V. 10-08-2020)
if((findinarray(ProfServOnlyArray, true) <> -1) AND nonProfServCreate == false){
    utilResultString = util.formAttrValueStr(attributesDict, "onlyProfServHasCreateAction_quote", QUOTE_DOC_NUM, TRUE_STR);
}
else{
    utilResultString = util.formAttrValueStr(attributesDict, "onlyProfServHasCreateAction_quote", QUOTE_DOC_NUM, FALSE_STR);
}
//CSYS-44734 ARR check part 2
utilResultString = util.formAttrValueStr(attributesDict, "aRRInvolvedFlag_quote", QUOTE_DOC_NUM, string(arrInvolved));

//CSYS-100419
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, BUSINESS_UNIT, ownerBU_quote);

utilResultString = util.manageARROffsetWithinProductFamily(docNumList, stringsDict, integersDict, piDict, triggerDict, PRODUCT_FAMILY_DICT, PRODUCT_FAMILY_CREATE_TIER_COUNT_DICT, PRODUCT_FAMILY_TERMINATE_TIER_COUNT_DICT, PRODUCT_FAMILY_MODIFY_TIER_COUNT_DICT, PROD_FAM_TIER_DECREASE_OCCURRED_DICT);

//CSYS-96801 (LN. 7-3-2018) Setting up constants for CIP Setup Fee Rework
piArray = string[];
cipPiDict = dict("string");

for docNum in docNumList {//CSYS-95500
    pi = get(piDict, docNum);
    poID = util.getStringAttribute(stringsDict, docNum, DELIMITER, PO_ID );
    parentDocNum = util.getStringAttribute(stringsDict, docNum, DELIMITER, PARENT_DOC_NUM);
    isUnitBased = util.getStringAttribute(stringsDict, docNum, DELIMITER, IS_UNITBASED);
    currentAction = util.getStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION);
    isGrouped = util.getStringAttribute( stringsDict, docNum, DELIMITER, IS_GROUPED );
    rampPriceOverride = util.getStringAttribute(stringsDict, docNum, DELIMITER, "overrideRampPrice");
    overrideDefaultRampPlan = util.getStringAttribute(stringsDict, docNum, DELIMITER, RAMP_PLAN_OVERRIDE);
    itemType = util.getStringAttribute( stringsDict, docNum, DELIMITER, PI_ITEM_TYPE );
    unitBasedProductCanBeRamped = util.getStringAttribute(stringsDict, docNum, DELIMITER, "unitBasedProductCanBeRamped_line");
    unitBasedProductCanUseOverridePrice = util.getStringAttribute(stringsDict, docNum, DELIMITER, "unitBasedProductCanUseOverridePrice_line");
    numOfTransactions = util.getIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS);
    productFamily = util.getStringAttribute(stringsDict, pi, DELIMITER, PRODUCT_FAMILY);//CSYS-87106; CSYS-95591
    lineItemComment = util.getStringAttribute(stringsDict, docNum, DELIMITER, LINE_COMMENT_ASSET_STRING);//CSYS-95591	
	
    if (pi <> "") {
		//CSYS-96801 (LN. 7-3-2018) If this is a CIP quote, store a list of all product numbers for use later
		if(implementationPartner_quote <> ""){
			append(piArray, pi);
		}
        //CSYS-95500 (LN. 4-12-2019)
        //CSYS-98018 (P.S. 1-10-2020) Allowing MODIFY Unit Based Products to leverage Override/Override Price
        if( isUnitBased == TRUE_STR AND (currentAction == CREATE_ACTION OR currentAction == MODIFY_ACTION) AND itemType == BASE_FEE){

            toNodeArr = split(util.getStringAttribute(stringsDict, docNum, DELIMITER, TO), "*.*");
            unitBasedCanHaveIndependentRampPlan = false;
            unitBasedCanUseOverridePrice = false;

            //If the Unit Based Product has more than one ramp, allow availibility to use the Override Price (leveraged in hiding rules)
            if(toNodeArr[0] <> "and beyond"){
                unitBasedCanUseOverridePrice = true;
            }
            else {
                if(rampPriceOverride == TRUE_STR){
                    utilResultString = util.formAttrValueStr(attributesDict, "overrideRampPrice_line", docNum, "");
                    utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, "overrideRampPrice", "");
                }
            }

            //If the Core Service does NOT have ramps
            if(NOT(containskey(stringsDict, parentDocNum + DELIMITER + "coreServiceHasRampsApplied")) ){
                //If the Unit Based is NOT Bundled, allow the ability to Override the Ramp (this attribute is leveraged in hiding rules)
                if(isGrouped <> TRUE_STR){
                    unitBasedCanHaveIndependentRampPlan = true;
                }
            }
            else {

                unitBasedCanUseOverridePrice = true;
                /*
                This scenario is when the Core does JUST GOT ramps applied.
                The Unit Based Create DOES have > 1 Ramp AND is using Override Price prior to the Core having a ramp.
                */
                if(rampPriceOverride == TRUE_STR AND unitBasedProductCanBeRamped == TRUE_STR AND unitBasedProductCanUseOverridePrice == TRUE_STR){

                    //In that scenario, set the Override Price to FALSE - this is not working
                    utilResultString = util.formAttrValueStr(attributesDict, "overrideRampPrice_line", docNum, "");
                    utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, "overrideRampPrice", "");

                    //If a GLOBAL ramp is applied, set the Override Ramp to FALSE
                    // Otherwise leave it set to TRUE when the Core is leveraging the Override
                    if( NOT(containskey(stringsDict, parentDocNum + DELIMITER + "coreServiceOverrideRampPlan")) ){//this is working
                        utilResultFlag = util.putStringAttribute( stringsDict, parentDocNum + RAMP_DELIMITER + poID, DELIMITER, PO_RAMP_OVERRIDE, "" );
                    }
                }
            }

            if(isGrouped == TRUE_STR){//If the Unit Based CREATE is bundled,

                if(rampPriceOverride == TRUE_STR){//If Ramp Price Override was TRUE, set to FALSE when bundled
                    utilResultString = util.formAttrValueStr(attributesDict, "overrideRampPrice_line", docNum, "");
                    utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, "overrideRampPrice_line", "");
                }

                //If Override Default Ramp Plan was TRUE and the Core is NOT utilizing Override Default Ramp, set Override Ramp to FALSE
                if(overrideDefaultRampPlan == TRUE_STR AND NOT(containskey(stringsDict, parentDocNum + DELIMITER + "coreServiceOverrideRampPlan")) ){
                    utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, RAMP_PLAN_OVERRIDE, "");
                }
            }

            //Writing to attributes
            utilResultString = util.formAttrValueStr(attributesDict, "unitBasedProductCanBeRamped_line", docNum, string(unitBasedCanHaveIndependentRampPlan));
            utilResultString = util.formAttrValueStr(attributesDict, "unitBasedProductCanUseOverridePrice_line", docNum, string(unitBasedCanUseOverridePrice));
            //Priming StringsDict
            utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, UNIT_BASED_CAN_HAVE_INDEPENDENT_RAMP_PLAN, string(unitBasedCanHaveIndependentRampPlan));
        }
    }
}

/* Run all Line Items.  For any line item with a rollup Flag of no, set its ramp plan to the line item that has a rollup of yes*/
// This util library will set many variables in the dictionaries.  docNumList is not the only var affected.
//CSYS-95701 SN. 09-2019 Add travelAndExpenseWithTriplinkProductArr to argument list
docNumList = util.setRampPlanData(stringsDict, integersDict, floatsDict, docNumList, overWriteTransactionArr, piDict, modelToLineDocNumsDict, modelToLinePartNumsDict, implementationMethodArr, travelAndExpenseWithTriplinkProductArr );

/* ======================================================================== */
/*                          Get all Part fields info                        */
/* ======================================================================== */
/*
    This util function call populates the stringsDict.

    KEY: <pi><DELIMITER><customFieldName>
    VALUE: <customFieldValue>

    where...
        customFieldName is the name of a Part Custom Field
        customFieldValue is the corresponding value of that Part Custom Field
        DELIMITER is the constant defined at the top of this script
        pi is the PI (a.k.a. _part_number) of the line item/product
*/

//utilResultDict = util.getPartFields(piList, CUSTOM_FIELD_DICT, stringsDict, DELIMITER);

/* ======================================================================== */
/*                   Promotions                             */
/* ======================================================================== */
// Put all the data for querying promo information in this dictionary
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, REGION, ownerRegion_quote);
//utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, BUSINESS_UNIT, ownerBU_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, SEGMENT, segment_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, THEATER, ownerTheater_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, OWNER_TEAM, ownerTeam_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, MARKET, ownerMarket_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, REVENUE_GROUP, ownerRevenueGroup_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, ACCOUNT_VERTICAL, accountVertical_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, CUSTOMER_TYPE, customerType_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, QUOTE_TYPE, quoteType_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, PROMOTION_CODE, promotionCode_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, EXTERNAL_PROMOTION, externalPromotion_quote);
utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, SYSTEM_DATE, datetostr(getdate()));
//CSYS-99074
if (quoteType_quote == ADD_ON){
    renewalDateText = "";
    timezone = util.getUserTimeZone();  
    if(contractRenewalDateText_quote <> "" AND NOT(isnull(contractRenewalDateText_quote))) {
        renewalDateText = contractRenewalDateText_quote;
    }
    else{   
        if (NOT(isnull(contractRenewalDateAcc_quote))){
            renewalDateText = contractRenewalDateAcc_quote; //use contract renewal date from account
        }
    }
    renewalDate = getdate();
    if (renewalDateText <> ""){
        if(find(renewalDateText , "/") <> -1) {
            renewalDate = strtojavadate(renewalDateText , DATE_FORMAT_PREFERENCE_SLASH);
        } 
        else{
            renewalDate = strtojavadate(renewalDateText , DATE_FORMAT_PREFERENCE_HYPHEN); 
        }
    }
    currentDateText = substring(datetostr(getdate()), 0, 10);
    currentDate = getdate();
    if(find(currentDateText, "/") <> -1) {
        currentDate = strtojavadate(currentDateText, DATE_FORMAT_PREFERENCE_SLASH);
    } 
    else{
        currentDate = strtojavadate(currentDateText, DATE_FORMAT_PREFERENCE_HYPHEN);
    }
    //CSYS-99262, Phil S, 04/27/2020
    dateIn = contractRenewalDateAcc_quote;
    dateOut = getdate();
    if(NOT(isnull(dateIn)) AND dateIn <> "") {
        if(find(dateIn, "/") <> -1) {
            dateOut = strtojavadate(dateIn, DATE_FORMAT_PREFERENCE_SLASH);
        } 
        else{
            dateOut = strtojavadate(dateIn, DATE_FORMAT_PREFERENCE_HYPHEN);
        }
    } 
    
    renewalDate = dateOut;
   //CSYS-100535 NP 10/01/2020 To allow RENEWALOFFER90DAYS promotions to be avb 2 billing months prior to out of term
	renewDateMinus2Month=getdate();
	if(NOT(isnull(dateIn)) AND dateIn <> "") {
		dateTemp = util.addMonthsToDate(dateIn,"-2"); //Subtracting 2 billing months from Contract Renewal Date
		
		if(find(currentDateText, "/") <> -1) {
			renewDateMinus2Month = strtojavadate(substring(datetostr(strtojavadate(dateTemp, DATE_FORMAT_PREFERENCE_HYPHEN), DATE_FORMAT_PREFERENCE_SLASH), 0, 10),DATE_FORMAT_PREFERENCE_SLASH);
		} 
		else{
			renewDateMinus2Month = strtojavadate(dateTemp, DATE_FORMAT_PREFERENCE_HYPHEN);
		}
		if(ownerBU_quote=="Enterprise BU"){
			renewalDate = renewDateMinus2Month; //updated renewalDate to renewDateMinus2Month for CSYS-100535
		}
	}
	//End of CSYS-100535

    if (comparedates(renewalDate, currentDate) <> 1){ 
        put(stringsDict, "renewalPromoValidation", TRUE_STR);
    }
}

// partNumArr is constructed (normally) with CREATE Part Numbers...
// We want to conditionally add Part Numbers for NONE/MODIFY when...renewalPromoValidation = TRUE....
//      In this scenario leverage a Dictionary to store part numbers with thier action code...  be able to track pi's and the action code..
//      For those pi's that are NONE/MODIFY we only want to return the RENEWALOFFER90DAYS promo...
//      Return applicable promos for those CREATE lines...
utilResultFlag = util.putPromotionsInfo(stringsDict, promoResultsDict, promotionsDataDict, promoCodeDescAndDetailsDict, internalPromoDescDict, externalPromoDescDict, customerFriendlyPromoDescDict, legalPromoDescDict, docNumList, implementationMethodArr, partNumArr);

if(containskey(promoResultsDict, "promoCodeApplied")) {
    promoCodeApplied = get(promoResultsDict, "promoCodeApplied");
}

if(containskey(promoResultsDict, "applicablePromotions")) {
    applicablePromotions = get(promoResultsDict, "applicablePromotions");
}
if(containskey(promoResultsDict, "invalidPromoMessage")) {
    invalidPromoMessage = get(promoResultsDict, "invalidPromoMessage");
}
if(containskey(promoResultsDict, "autoAppliedPromotions")) {
    autoAppliedPromotions = get(promoResultsDict, "autoAppliedPromotions");
}
if(containskey(promoCodeDescAndDetailsDict, "promoCodeDetails")) {
    promoCodeDetails = get(promoCodeDescAndDetailsDict, "promoCodeDetails");
}

tempPromoCodeAppliedArr = split(promoCodeApplied, "#^#");
/*
for docNum in docNumList {//CSYS-100482
	pi = util.getStringAttribute(stringsDict, docNum, DELIMITER, PART_NUM);
	if (pi == "") { //If this IS a Model
		lineItemDocNums = string[];
        lineItemDocNums = util.getStrListDict(modelToLineDocNumsDict, docNum, lineItemDocNums);
        for lineDocNum in lineItemDocNums {
            coreOffering = util.getStringAttribute( stringsDict, docNum, DELIMITER, CORE_OFFERING );
            utilResultFlag = util.putStringAttribute( stringsDict, lineDocNum, DELIMITER, CORE_OFFERING, coreOffering );
		}
	}
}//CSYS-100482
*/

/* ======================================================================== */
/*                          Calculate Standard Tier Prices                  */
/* ======================================================================== */

/* ------------------------------------------------------------------------ */
/*  Determine the UOM Type of each line item
    Populate the pricing key for standard tier pricing
*/
/* ------------------------------------------------------------------------ */

utilResultString = util.populatePricingKeyCollections(docNumList, stringsDict, coreTerminateEditionDict, piQtyAndImplementationMethodList, piQtyAndImplementationMethodToPriceDict, piQtyAndImplementationMethodDict, piDict, integersDict);//CSYS-100419

/*
CSYS-80927 (KA.):
Query the cipSetupFees table to extract any CIP Pi's that reside on the grid:
CSYS-92389 (LN. 7-3-2018):
Moving the dictionary build after getStandardTierPricing is called, need to retrieve the Setup Fee's
*/
//CSYS-100546 (OK. 3-3-2021) Creating new attribute dict and passing it to to "setPropertiesForCIPParts" function
cipAttributeDict = dict("anytype");
put (cipAttributeDict, "accountServicePartnerTypeCIP_quote", accountServicePartnerTypeCIP_quote);
put (cipAttributeDict, "cIPForWalkMeONLY_quote", cIPForWalkMeONLY_quote); //IESCNQRCPQ-430 (OK. 3-20-2023)
if(implementationPartner_quote <> "" AND ownerMarket_quote <> "Japan"){//Only query when 'Implementation Partner' field is populated
    //cipPiDict = util.setPropertiesOfCIPParts(accountServicePartnerSpecialty_quote, accountServicePartnerAuthorizationsTA_quote, piArray);//CSYS-100257, CSYS-100847 NP 10/12/2020, to change Account Service Partner Authorizations from Text to Text Area.
    //CSYS-100546 (OK. 3-3-2021) Commenting above line to replace "setPropertiesOfCIPParts" with "setPropertiesForCIPParts"
	cipPiDict = util.setPropertiesForCIPParts(accountServicePartnerSpecialty_quote, accountServicePartnerAuthorizationsTA_quote, piArray, cipAttributeDict);//CSYS-100257, CSYS-100847 NP 10/12/2020, to change Account Service Partner Authorizations from Text to Text Area.
}
// IESCNQRCPQ-242 (PG 07/03/2023)  - Query the cipSetupFees table to extract any CIP Pi's of Japan that reside on the grid
else
{
	cipPiDict = util.setPropertiesForCIPPartsforJapan(accountServicePartnerSpecialty_quote, accountServicePartnerAuthorizationsTA_quote, piArray, cipAttributeDict);
}


//CSYS-85811 (LN. 9/27/2017) Added actionName as a parameter to the util.getStandTierPricing, allows access to this parameter in the util
//CSYS-87125 (KA. 11-29-2017) Added stringsDict as a parameter to the util.getStandTierPricing, allows zeroing of Incremental list prices belonging to State and Local Government package

//CSYS-97295 (OC. 9.30.2019) Removing quoteVertical and remove getStandardTierPricing from Library Functions.  Then remove quoteVertical from getStandardTierPricing paramaters
utilResultDict = util.getStandTierPricing(PRICELIST, currencyCode, piQtyAndImplementationMethodToPriceDict, piQtyAndImplementationMethodList, DELIMITER, quoteTheater, quoteMarket, quoteType, actionName, stringsDict);//CSYS-88979

/* ---------- Calculate the Tier Price and Extended Tier Price of each line item --------- */
for docNum in docNumList {
    //currentAction = util.getStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION);
    pi = util.getStringAttribute(stringsDict, docNum, DELIMITER, PART_NUM);
    //CSYS-96801
    uomType = util.getStringAttribute(stringsDict, pi, DELIMITER, UOM_TYPE);
    quantity = util.getIntegerAttribute(integersDict, docNum, DELIMITER, QTY);
    trxns = util.getIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS);
    implementationMethod = util.getStringAttribute(stringsDict, docNum, DELIMITER, IMPLEMENTATION_METHOD);
    coreOffering = util.getStringAttribute( stringsDict, docNum, DELIMITER, CORE_OFFERING );
    cipProductLine = FALSE_STR;
																								   
																										
																								   
																									
																																								  

    if (pi <> "") {

        qtyTrans = "";

        if (uomType == UOM_QTY) {
            qtyTrans = string(quantity);
        } else {
            qtyTrans = string(trxns);
        }

        //CSYS-96801 (LN. 8-23-2019)
        if(implementationPartner_quote <> ""){
            if( containskey(cipPiDict, pi) AND containskey(piQtyAndImplementationMethodToPriceDict, pi + DELIMITER + qtyTrans + DELIMITER + implementationMethod + DELIMITER + coreOffering + DELIMITER + billingCounter)){//CSYS-106564 - Added billingCounter

                cipCore = "";
                cIPSetupTierPrice = 0.0;
                stdTierPrice = get(piQtyAndImplementationMethodToPriceDict, pi + DELIMITER + qtyTrans + DELIMITER + implementationMethod + DELIMITER + coreOffering + DELIMITER + billingCounter); //CSYS-106564 - Added billingCounter
				print "@1983";
				print pi;
				print stdTierPrice;
				print piQtyAndImplementationMethodToPriceDict;
                if(containskey(cipPiDict, pi + TILDE_DELIMITER + "cipCore")){
                    cipCore = get(cipPiDict, pi + TILDE_DELIMITER + "cipCore");
                }

                // If the current part number is core specific in order to have a $0 setup fee, continue;
                if(cipCore <> "" AND NOT isnull(cipCore)){
                    // If core offering is available at the line level, continue;
                    if(coreOffering <> ""){
                        // If the current core service is an acceptable option for the $0 setup fee,
                        // store the original setup fee before setting to $0
                        if(find(cipCore, TILDE_DELIMITER + coreOffering + TILDE_DELIMITER) <> -1){

                            cIPSetupTierPrice = stdTierPrice;
							print "@1996";
							print cipCore;
							print stdTierPrice;
                            cipProductLine = TRUE_STR;//CSYS-96326
                            stdTierPrice = 0.0;
                        }
                    }
                }
                else {
                    cIPSetupTierPrice = stdTierPrice;
                    cipProductLine = TRUE_STR;//CSYS-96326
                    stdTierPrice = 0.0;
                }

                if(currencyCode <> "USD"){
                    utilResultFlag = util.putFloatAttribute( floatsDict, docNum, DELIMITER, CIP_SETUP_FEE, cIPSetupTierPrice );
                        conversionResult = util.convertDictCurrency( floatsDict, docNum, DELIMITER, CIP_SETUP_FEE, conversionRate, numDecimals );
                    cIPSetupTierPrice = util.getFloatAttribute( floatsDict, docNum, DELIMITER, CIP_SETUP_FEE );
                }

                totalCIPSetupFee = totalCIPSetupFee +  cIPSetupTierPrice;

                utilResultFlag = util.putFloatAttribute( floatsDict, docNum, DELIMITER, CIP_SETUP_FEE, cIPSetupTierPrice );
				print "@2017";
				print docNum;
				print cIPSetupTierPrice;
                put(piQtyAndImplementationMethodToPriceDict, pi + DELIMITER + qtyTrans + DELIMITER + implementationMethod + DELIMITER + coreOffering + DELIMITER + billingCounter, stdTierPrice); //CSYS-106564 - Added billingCounter
            }
        }
			

        utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, CIP_PRODUCT, cipProductLine);

        utilResultDict = util.calculateTierPricing(piQtyAndImplementationMethodToPriceDict, DELIMITER, docNum, stringsDict, integersDict, floatsDict);
						 
																																					   

    }
}


//CSYS-96801 (LN. 7-3-2018) Capture the Total CIP Setup Fee amount and write to the Quote level attribute
utilResultString = util.formAttrValueStr(attributesDict, TOTAL_CIP_SETUP_FEE, QUOTE_DOC_NUM, string(totalCIPSetupFee));

/* ======================================================================== */
/*                          Find Term Based Discount                        */
/* ======================================================================== */
defaultVal = 0.0;
termDisc = util.getTermBasedDisc(contractLength_quote, defaultVal);

/* ======================================================================== */
/*      Calculate Product-Based Pricing and Tier based Discounting          */
/* ======================================================================== */

//Obtain the relevant Product Based Pricing data
piBasedProductPricingDict = dict("string[]");
qtyBasedProductPricingDict = dict("string[]");
utilResultDict = util.getPIBasedProductPricingData(piList, piBasedProductPricingDict);
piBasedRowCount = integer(atof(get(utilResultDict, "rowCount")));
utilResultDict = util.getQtyBasedProductPricingConditions(piList, qtyBasedProductPricingDict);
//qtyBasedRowCount = integer(atof(get(utilResultDict, "rowCount")));

//CSYS-93420 (MJ 2-27-20)
customApprovalHistory = approvalHistoryCustom_quote;
customPricingArray = String[];

modelDocNumList = string[];

for docNum in docNumList {
    currentAction = util.getStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION);
    pi = util.getStringAttribute(stringsDict, docNum, DELIMITER, PART_NUM);

    if (pi == "") { //If this IS a Model
        append(modelDocNumList, docNum);

        //Obtain the docNums and partNums that belong to this Model
        lineItemDocNums = string[];
        lineItemDocNums = util.getStrListDict(modelToLineDocNumsDict, docNum, lineItemDocNums);
        lineItemPartNums = get(modelToLinePartNumsDict, docNum);

        for lineDocNum in lineItemDocNums {
            lineItemPI = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, PART_NUM);
            //Adding the below line on Nov 15, 2012 as part of pricing refactor.
            //Updating triggerDict with specialWorkFlowFlag will ensure that all approval related data is in triggerDict
            if(containskey(stringsDict, lineItemPI + DELIMITER + SPECIAL_WORKFLOW_FLAG)){
                specialWorkflowFlag = util.getStringAttribute(stringsDict, lineItemPI, DELIMITER, SPECIAL_WORKFLOW_FLAG);
                put(triggerDict, lineItemPI + DELIMITER + SPECIAL_WORKFLOW_FLAG, specialWorkflowFlag);
            }
            rollup = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, ROLL_UP );
            // Approval
            // Advantage/Learning Services
            piItemType = util.getStringAttribute( stringsDict, lineDocNum, DELIMITER, PI_ITEM_TYPE );
            tierPrice = util.getFloatAttribute( floatsDict, lineDocNum, DELIMITER, TIER_PRICE );
            extTierPrice = util.getFloatAttribute( floatsDict, lineDocNum, DELIMITER, EXT_TIER_PRICE );
            implementationMethod = util.getStringAttribute( stringsDict, docNum, DELIMITER, IMPLEMENTATION_METHOD );
            utilResultFlag = util.putStringAttribute( stringsDict, lineDocNum, DELIMITER, IMPLEMENTATION_METHOD, implementationMethod );
            coreOffering = util.getStringAttribute( stringsDict, docNum, DELIMITER, CORE_OFFERING );//CSYS-100482
            utilResultFlag = util.putStringAttribute( stringsDict, lineDocNum, DELIMITER, CORE_OFFERING, coreOffering );//CSYS-100482
            /* ***** FOR INCREMENTAL FEE, SET EXT TIER PRICE = TIER PRICE, SET TRANSACTIONS BACK TO 1 ***** */

            if ( piItemType == INCREMENTAL_FEE ){
                utilResultFlag = util.putFloatAttribute( floatsDict, lineDocNum, DELIMITER, EXT_TIER_PRICE, tierPrice );
                extTierPrice = tierPrice;
                utilResultFlag = util.putIntegerAttribute( integersDict, lineDocNum, DELIMITER, TRANSACTIONS, INCREMENTAL_TRANSACTION_DEFAULT );
            }

            bundleFlag = util.getStringAttribute(stringsDict, lineItemPi, DELIMITER, BUNDLE_FLAG );
            poID = util.getStringAttribute( stringsDict, lineItemPi, DELIMITER, PO_ID );
            dynamicGroupingPoGroup = util.getStringAttribute( stringsDict, docNum, DELIMITER, PO_GROUPS_DYNAMIC_GROUPING );
            dynamicGroupPoArr = split( dynamicGroupingPoGroup, PO_DELIMITER );
            isGrouped = util.getStringAttribute( stringsDict, lineDocNum, DELIMITER, IS_GROUPED );

            //CSYS-97908
            poCategory = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, PO_CATEGORY);
            currentAction = util.getStringAttribute( stringsDict, lineDocNum, DELIMITER, ASSET_ACTION);
			
			
			
							   
																																																  
								 
									
																																								  
																																									 
								
			
			
            if ( poCategory == CORE_SERVICE AND NOT(containskey(stringsDict, "modelDocNumPO" + docNum)) AND currentAction <> TERMINATE_ACTION AND currentAction <> ""){
                put( stringsDict, "modelDocNumPO" + docNum, poID );
            }
            // If the model has any grouped line items, all in the same PO must be grouped, unless bundleflag = false
            if ( util.getStringAttribute( stringsDict, docNum, DELIMITER, MODEL_FORCE_GROUPING ) == TRUE_STR AND bundleFlag == "Y"
                AND findinarray( dynamicGroupPoArr, poID ) <> -1){
                isGrouped = TRUE_STR;
                utilResultFlag = util.putStringAttribute( stringsDict, lineDocNum, DELIMITER, IS_GROUPED, TRUE_STR );
            }
            /* If we are a non rampable Base Fee, we still need the appropriate prices to add to the ramps for the incremental Fee */
            if ( util.getStringAttribute( stringsDict, lineDocNum, DELIMITER, IS_RAMPABLE ) <> TRUE_STR AND isGrouped == TRUE_STR
                AND piItemType == BASE_FEE ){
                // First, get the transaction string.  As a non rampable item, it should match the transaction string of the core base fee
                baseCoreDocNum = util.getStringAttribute( stringsDict, docNum, DELIMITER, PRIMARY_BASE_FEE );
                transString = util.getStringAttribute( stringsDict, baseCoreDocNum, DELIMITER, TRANS_STRING );
                transArr = split( transString, DELIMITER );
                baseNonRampableIncrementalString = util.getStringAttribute( stringsDict, baseCoreDocNum, DELIMITER, NON_RAMPABLE_BASE_INCREMENTAL_STRING );
                nonRampableArr = String[];

                if ( baseNonRampableIncrementalString <> "" ){
                    nonRampableArr = split( baseNonRampableIncrementalString, DELIMITER );
                }
                // For Every transaction in the trans arr, find the new price based on the number of transactions of the core ramp
                pbPriceArr = String[];
                transArrIndex = 0;

                for baseTransaction in transArr{
                    baseTransactionInt = util.customAtoi( baseTransaction, 0 );
                    baseTransactionVal = 0.0;

                    if ( baseTransactionInt <> 0 ){
                        baseTransactionVal =  extTierPrice / (baseTransactionInt * 1.0 );
                    }
                    if ( baseNonRampableIncrementalString <> "" ){
                        append(pbPriceArr, string(util.customAtof(nonRampableArr[transArrIndex], 0.0) + baseTransactionVal));
                    }
                    else{
                        append( pbPriceArr, string(baseTransactionVal ) );
                    }

                    transArrIndex = transArrIndex + 1;
                }
                nonRampableString = join( pbPriceArr, DELIMITER );

                utilResultFlag = util.putStringAttribute( stringsDict, baseCoreDocNum, DELIMITER, NON_RAMPABLE_BASE_INCREMENTAL_STRING, nonRampableString );
            }

            /* ======================================================================== */
            /*                      CALCULATE PROD BASED PRICING                        */
            /* ======================================================================== */
            utilResultDict = util.calculateProdBasedPricing(modelToLineDocNumsDict, lineDocNum, stringsDict, integersDict, floatsDict, DELIMITER);

            // Product based pricing for the incremental fee of ramps
            if ( find( lineDocNum, RAMP_DELIMITER ) <> -1 ){
                // Obtain incremental information
                //CSYS-95701 SN. Remove temp fix and check in new variable
                if(findinarray(travelAndExpenseWithTriplinkProductArr, lineItemPI) <> -1){
                    rollup = "No";
                }
                incKey = docNum + RAMP_DELIMITER + poID + RAMP_DELIMITER + rollup;
                incDocNum = util.getStringAttribute(stringsDict, incKey , DELIMITER, INCREMENTAL_FEE_FOR_PO );
                rampIndexArr = split( lineDocNum, RAMP_DELIMITER );
                incrementalRampDocNum = incDocNum + RAMP_DELIMITER + rampIndexArr[1];
                incPI = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, INCREMENTAL_PI );
                incTierPrice = util.getFloatAttribute( floatsDict, lineDocNum, DELIMITER, INCREMENTAL_FEE_LIST );

                // Put incremental information into a pseudoline
                // This will act like a ramp line item, but is not contained in the list of ramp doc nums
                utilResultFlag = util.putStringAttribute( stringsDict, incrementalRampDocNum, DELIMITER, PART_NUM, incPI );
                utilResultFlag = util.putStringAttribute( stringsDict, incrementalRampDocNum, DELIMITER, PARENT_DOC_NUM, docNum );
                utilResultFlag = util.putFloatAttribute( floatsDict, incrementalRampDocNum, DELIMITER, TIER_PRICE, incTierPrice );
                utilResultFlag = util.putStringAttribute( stringsDict, incrementalRampDocNum, DELIMITER, IS_GROUPED, TRUE_STR );
                /* ======================================================================== */
                /*                      Calculate Prod Base pricing                         */
                /* ======================================================================== */
                utilResultDict = util.calculateProdBasedPricing(modelToLineDocNumsDict, incrementalRampDocNum, stringsDict, integersDict, floatsDict, DELIMITER );
                incPBB = util.getFloatAttribute( floatsDict, incrementalRampDocNum, DELIMITER, PROD_BASED_PRICE );
                utilResultFlag = util.putFloatAttribute( floatsDict, lineDocNum, DELIMITER, INCREMENTAL_FEE_RATIO_VALUE, incPBB );
            }
            // Apply the tier based discounting
            termOfCommitment = util.getStringAttribute(stringsDict, lineItemPI, DELIMITER, TERM_OF_COMMITMENT);
            if(termOfCommitment == "Y") { // Apply the term discount only to the applicable line items
                utilResultFlag = util.putFloatAttribute(floatsDict, lineDocNum, DELIMITER, TERM_BASED_DISC, termDisc);
            } else {
                utilResultFlag = util.putFloatAttribute(floatsDict, lineDocNum, DELIMITER, TERM_BASED_DISC, 0.0);
            }
        }
    }
    if (pi <> "") {

        useCustomPrice = util.getStringAttribute( stringsDict, docNum, DELIMITER, USE_CUSTOM_PRICE );
        tierPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, TIER_PRICE);
        prodBasedPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, PROD_BASED_PRICE);
        specialWorkFlowFlag = util.getStringAttribute( stringsDict, pi, DELIMITER, SPECIAL_WORKFLOW_FLAG );
        customPricingHasOccured = util.getStringAttribute (stringsDict, docNum, DELIMITER, CUSTOM_PRICING_HAS_OCCURED);//CSYS-85811
        listPrice = prodBasedPrice;
        piItemType = util.getStringAttribute( stringsDict, docNum, DELIMITER, PI_ITEM_TYPE );//CSYS-87106
        productFamily = util.getStringAttribute(stringsDict, pi, DELIMITER, PRODUCT_FAMILY);//CSYS-87106
        trxns = util.getIntegerAttribute(integersDict, docNum, DELIMITER, TRANSACTIONS);//CSYS-89523
        assetTierPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, ASSETS_ORIGINAL_TIER_PRICE);//CSYS-95251 (LN. 4-30-2019)
        pricebookChangeDetected = util.getStringAttribute(stringsDict, docNum, DELIMITER, "pricebookChange_line");
        //CSYS-97422 SN. 01-2020
        poCategory = util.getStringAttribute(stringsDict, docNum, DELIMITER, PO_CATEGORY);
        editQuantity = util.getIntegerAttribute(integersDict, docNum, DELIMITER, "editQuantity_line");
		//CSYS-101130 (BS. 11/18/2020) recalculate net price with discount to recalculate Existing ARR for same product family create/terminate
		discountLine = util.getFloatAttribute(floatsDict, docNum, DELIMITER, "discount_line");
        if (editQuantity_quote == true){
            if (editQuantity == 0 ){
                editQuantity = util.getIntegerAttribute(integersDict, docNum, DELIMITER, QTY);
            }
            if (poCategory <> "Professional Service"){
                editQuantity = 1;
            }
            utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, QTY, editQuantity); 
            utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, "editQuantity_line", editQuantity);//CSYS-97422 SN. 01-2020         
        }
        //end of CSYS-97422 SN. 01-2020

        //CSYS-85811 (LN. 9/27/2017)
        if(actionName <> "updateCustomPrice" AND customPricingHasOccured == FALSE_STR){
            //When in the context of "Submit for Custom Pricing", pull in the list price only on the first round
            customListPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, PROD_BASED_PRICE);
            customQuantity = util.getIntegerAttribute(integersDict, docNum, DELIMITER, QTY);//CSYS-96366 SN. 07-2019
        }else{
            //When in the context of "Update Custom Price", use the custom price from the grid
            customListPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, CUSTOM_LIST_PRICE);
            customQuantity = util.getIntegerAttribute(integersDict, docNum, DELIMITER, "customQuantity_line");//CSYS-96366 SN. 07-2019
        }

        //CSYS-93420 (MJ 2-27-20)
        if(specialWorkflowFlag <> "None" AND findinarray(customPricingArray, specialWorkflowFlag) == -1){
            //["Advantage Services", "Learning Services"];
            append(customPricingArray, specialWorkflowFlag);  
        }

        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, QTY, customQuantity);//CSYS-96366 SN. 07-2019
        multiplier = util.getMultiplier(docNum, DELIMITER, stringsDict, integersDict, floatsDict);


        if(_system_current_step_var == "pendingAdvantageServices_step") {
            //CSYS-85811 (LN. 9/27/2017) Removing criteria that Custom Price must be > 0 and that is cannot equal the list price
            if(specialWorkFlowFlag == "Advantage Services" OR specialWorkFlowFlag == "Learning Services" OR specialWorkFlowFlag == "Partner Services") { // On Update Custom Price action, user could have changed custom list price
                listPrice = customListPrice;
                tierPrice = listPrice;
                useCustomPrice = TRUE_STR;
            } else {
                customListPrice = listPrice;
            }
        }
        elif( useCustomPrice == TRUE_STR AND (specialWorkFlowFlag <> "Advantage Services" OR specialWorkFlowFlag <> "Learning Services" OR specialWorkFlowFlag <> "Partner Services")){
            listPrice = customListPrice;
            tierPrice = listPrice;
        }
        listPriceNonUnified = prodBasedPrice;
        promoPrice = prodBasedPrice;
        //add on related
        if(currentAction == TERMINATE_ACTION){
            //CSYS-97106 - 95591
            if( piItemType == BASE_FEE AND containskey(PROD_FAM_TIER_DECREASE_OCCURRED_DICT, currentAction + DELIMITER + pi) AND get(PROD_FAM_TIER_DECREASE_OCCURRED_DICT, currentAction + DELIMITER + pi) == TRUE_STR){

                //CSYS-101130 (BS. 11/19/2020) recalculate net price with discount to recalculate Existing ARR for same product family create/terminate
				tierDecreaseNetPrice = prodBasedPrice - (prodBasedPrice * discountLine/100);
                terminatedTierDecreaseArrNet = (tierDecreaseNetPrice * multiplier) * RAMP_FLAG_MULTIPLIER;

                utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, EXISTING_ARR_CURRENCY_LINE, terminatedTierDecreaseArrNet);
										 
												   
                utilResultString = util.formAttrValueStr(attributesDict, EXISTING_ARR_CURRENCY_LINE, docNum, string(terminatedTierDecreaseArrNet));
				
				//IESCNQRCPQ-756 (OK. 10-16-2023) Fix ARR issue for the terminate line when Terminate/Create in same product family with Tier Decrease for non USD quotes 
				if(currencyCode <> "USD") {
					conversionResult = util.convertDictCurrency(floatsDict, docNum, DELIMITER, EXISTING_ARR_CURRENCY_LINE, conversionRate, numDecimals);
					terminatedTierDecreasePrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, EXISTING_ARR_CURRENCY_LINE);
					utilResultString = util.formAttrValueStr(attributesDict, EXISTING_ARR_CURRENCY_LINE, docNum, string(terminatedTierDecreasePrice));
				}
            }

            listPrice = 0.0;

        }

        elif(currentAction == NONE_ACTION AND pricebookChangeDetected <> TRUE_STR){
            //CSYS-95251 (LN. 4-30-2019) CSYS-96748 (DC check)
            if(assetTierPrice <> listPrice AND NOT util.isDigitalCommerceTransaction(_system_user_login) ){// pricebook updates
                utilResultString = util.formAttrValueStr(attributesDict, "pricebookChange_line", docNum, string(true));
            }
            listPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, ASSETS_ORIGINAL_LIST_PRICE);
        }
        /*CSYS-89523 (LN. 2-20-2018) Analytics Reporting Services Product, need the line item grid to align with other products, take the List Price and divide by number of TRXNs
        (LN. 2-6-2019) Rolling back this functionality as ARS is no longer a fixed cost product, but a Unit based with updated pricing.

        if( pi == "3724957" AND trxns <> 0 AND currentAction <> NONE_ACTION){
            //Store the actual list price to get an accurate final Ext Net Price to calculate ARR accordingly
            analyticsReportingListPrice = listPrice;
            utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, "analyticsReportingListPrice", analyticsReportingListPrice);

            longListPrice = round(listPrice/trxns, 5);
            listPrice = round(longListPrice, 2);
        }*/


        //CSYS-70755/CSYS-CSYS-72450: Fix non-USD Extended list price consistency and related issues. KA. 10-27-2016.
        //extListPrice = listPrice * multiplier;
        if(currencyCode <> "USD"){
            if(currentAction == NONE_ACTION AND pricebookChangeDetected <> TRUE_STR){//CSYS-95956 (LN. 6-10-2019)
                //Grab the original Extended list price (assets string value):
                extListPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, ASSETS_ORIGINAL_EXT_LIST_PRICE);
            }
            else{ //Business as usual:
                extListPrice = listPrice * multiplier;

                /*CSYS-89523 (LN. 2-20-2018)
                (LN. 2-6-2019) Rolling back this functionality as ARS is no longer a fixed cost product, but a Unit based with updated pricing.

                if(pi == "3724957"){//Non-USD Analytics Reporting Services Product (Not currently sold outside of USD, but could in the future)
                    analyticsReportingListPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, "analyticsReportingListPrice");
                    extListPrice = analyticsReportingListPrice * multiplier;
                }*/
            }
        }
        else{ //Business as usual:
            extListPrice = listPrice * multiplier;

            /*CSYS-89523 (LN. 2-20-2018) Analyitics Reporting Service Product, the Ext List Price should be the actual list price from stdTierPricing (166.67)
            (LN. 2-6-2019) Rolling back this functionality as ARS is no longer a fixed cost product, but a Unit based with updated pricing.

            if(pi == "3724957"){
                if(currentAction <> NONE_ACTION){
                    analyticsReportingListPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, "analyticsReportingListPrice");
                    extListPrice = analyticsReportingListPrice * multiplier;
                }
                else {
                    //Grab the original Extended list price (assets string value):
                    extListPrice = util.getFloatAttribute(floatsDict, docNum, DELIMITER, ASSETS_ORIGINAL_EXT_LIST_PRICE);
                }

            }*/

        }

        extListPriceNonUnified = extListPrice;
        isRampable = util.getStringAttribute( stringsDict, docNum, DELIMITER, IS_RAMPABLE );
        itemType = util.getStringAttribute( stringsDict, docNum, DELIMITER, PI_ITEM_TYPE );
        parentDocNum = util.getStringAttribute( stringsDict, docNum, DELIMITER, PARENT_DOC_NUM );
        isGrouped = util.getStringAttribute(stringsDict, docNum, DELIMITER, IS_GROUPED );

        if( isRampable <> TRUE_STR AND itemType == BASE_FEE AND isGrouped == TRUE_STR){
            currentTotalNonRampableBase = util.getFloatAttribute( floatsDict, docNum, DELIMITER, RAMP_PRICE_FOR_NON_RAMPABLE_BASE );
            currentTotalNonRampableBase = currentTotalNonRampableBase + extListPrice;
            utilResultFlag = util.putFloatAttribute( floatsDict, parentDocNum, DELIMITER, RAMP_PRICE_FOR_NON_RAMPABLE_BASE, currentTotalNonRampableBase );
        }
        utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, LIST_PRICE, listPrice);
        utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, EXT_LIST_PRICE, extListPrice);
        utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, NET_PRICE_NON_UNIFIED, listPriceNonUnified);
        utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, EXT_NET_PRICE_NON_UNIFIED, extListPriceNonUnified);
        utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, PROMO_PRICE, promoPrice);
        utilResultFlag = util.putFloatAttribute(floatsDict, docNum, DELIMITER, CUSTOM_LIST_PRICE, customListPrice);
        utilResultFlag = util.putStringAttribute(stringsDict, docNum, DELIMITER, USE_CUSTOM_PRICE, useCustomPrice );
        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, "customQuantity_line", customQuantity);//CSYS-96366 SN. 07-2019
        utilResultFlag = util.putIntegerAttribute(integersDict, docNum, DELIMITER, "editQuantity_line", editQuantity);//CSYS-97422 SN. 01-2020
		   
																																																																									   
				   
																								 
																																				
																																						 
																																							  
		 
    }
}
//CSYS-93420 (MJ 2-27-20)
if(sizeofarray(customPricingArray) > 0 AND actionName == "updateCustomPrice"){

    if (customApprovalHistory <> ""){
        customApprovalHistory = replace(customApprovalHistory, "|", " ");
    }

    for eachItem in customPricingArray {
        customApprovalHistory = customApprovalHistory + eachItem + " Custom Pricing has occured on " + substring(datetostr(getdate()), 0, 10) + "." + DELIMITER; 
    }

    utilResultString = util.formAttrValueStr(attributesDict, "approvalHistoryCustom_quote", QUOTE_DOC_NUM, customApprovalHistory);
}

//Set the SAP Sells Concur field empty based on concition 
// CSYS-99177 (OK. 5-27-2020) Start
if(contractingEntity_quote <> "SAP Other" OR quoteType_quote <> NEW_BIZ)
{
    utilResultString = util.formAttrValueStr(attributesDict, "sAPSellsConcur_quote", QUOTE_DOC_NUM, "");
} 
// CSYS-99177 (OK. 5-27-2020) End

//Moved the default function of 'moreThanTwoCoresFlag' here for CSYS-61156. KA. 6-13-2016:
arraySize = sizeofarray(modelDocNumList);
if (arraySize > 2){
    utilResultString = util.formAttrValueStr(attributesDict, "moreThanTwoCoresFlag_quote", QUOTE_DOC_NUM, TRUE_STR);
}
else{utilResultString = util.formAttrValueStr(attributesDict, "moreThanTwoCoresFlag_quote", QUOTE_DOC_NUM, FALSE_STR);}

//CSYS-99477 SN. Set var to True once
if(_system_current_step_var == "pending_process"){
    utilResultString = util.formAttrValueStr(attributesDict, "saveAfterFAVR_quote", QUOTE_DOC_NUM, TRUE_STR);
}
//CSYS-99477 SN. Set var to True once
if(_system_current_step_var == "approved_process"){
    utilResultString = util.formAttrValueStr(attributesDict, "reviseAfterFAVR_quote", QUOTE_DOC_NUM, TRUE_STR);
}

//CSYS-94167 & CSYS-94755 & CSYS-97827 & CSYS-97864 (LN. 2-4-2019) (PhilS 01/24/2020) If there are only SMB Allowed Products, all with a transaction count of 20 or less, populate the Pre-defined Packages attribute with "Prime"; handled in Pricing Misc.
if(commerce.isPrimeRequired()){
    put(stringsDict, PRIME_PACKAGE_PRESENT, TRUE_STR);
}

/* ======================================================================== */
/*      Calculate Standard Discounts and Dynamically Grouped Prices         */
/* ======================================================================== */

//TO DO: Investigate for encapsulation into util function
//create a dictionary that is populated with the descriptions per applied promotion only for INTERNAL_NAME xml tag. Dictionary Name: tempPromoCodeAppliedDict, Key: tempPromoCodeApplied (applied promo code), Value: description (taken from data table - PromoMessage)
tempPromoCodeAppliedDict = dict("string");

if(NOT(isempty(tempPromoCodeAppliedArr))){
    for tempPromoCodeApplied in tempPromoCodeAppliedArr{
            promoCodeDescResSet = bmql("SELECT description, descriptionType, orderNum FROM PromoMessage WHERE promotionCode=$tempPromoCodeApplied");
            internalDesc = "";
            internalDescOrder = 1;

            for resSet in promoCodeDescResSet{
                descType = get(resSet, "descriptionType");

                if(descType == "INTERNAL_NAME" AND get(resSet, "orderNum") == string(internalDescOrder)) {
                    internalDesc = internalDesc + get(resSet, "description");
                    internalDescOrder = internalDescOrder + 1;
                }

            }

            put(tempPromoCodeAppliedDict, tempPromoCodeApplied, internalDesc);
    }
}

for docNum in docNumList {
    currentAction = util.getStringAttribute( stringsDict, docNum, DELIMITER, ASSET_ACTION);
    pi = util.getStringAttribute(stringsDict, docNum, DELIMITER, PART_NUM);

    /* ------------ In this section, we loop by Model docNum -------------- */
    if (pi == "") {
        modelDocNum = docNum;
        lineItemDocNums = string[];
        lineItemDocNums = util.getStrListDict(modelToLineDocNumsDict, modelDocNum, lineItemDocNums);
        dynamicGroupingUsed = false;
        unifiedPricingUniquePOList = string[];
        /* ---------- Initialize local variables for the Model ------------ */
        modelDiscount = util.getFloatAttribute(floatsDict, docNum, DELIMITER, DISCOUNT);
        modelDiscountType = util.getStringAttribute(stringsDict, docNum, DELIMITER, DISCOUNT_TYPE);
        modelExtListPrice = 0.0;
        modelDiscountAmount = 0.0;
        modelDiscountPercent = 0.0;

        if (modelDiscountType <> AMOUNT_DISCOUNT_TYPE) {
            modelDiscountPercent = modelDiscount;
        }

        /* --------- Loop through child line items of the Model ----------- */
        for lineDocNum in lineItemDocNums {
            //Initialize local variables
            extendedListPrice = util.getFloatAttribute(floatsDict, lineDocNum, DELIMITER, EXT_LIST_PRICE);
            disc = util.getFloatAttribute(floatsDict, lineDocNum, DELIMITER, DISCOUNT);
            discountType = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, DISCOUNT_TYPE);
            isGrouped = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, IS_GROUPED);
            childPi = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, PART_NUM);
            childPo = util.getStringAttribute(stringsDict, childPi, DELIMITER, PO_ID);
            bundleFlag = util.getStringAttribute(stringsDict, childPi, DELIMITER, BUNDLE_FLAG );
            parentDocNum = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, PARENT_DOC_NUM );
            currentAction = util.getStringAttribute( stringsDict, lineDocNum, DELIMITER, ASSET_ACTION);

            if ( util.getStringAttribute( stringsDict, lineDocNum, DELIMITER, PACKAGE_ID ) <> "" ){
                isGrouped = TRUE_STR;
                utilResultFlag = util.putStringAttribute( stringsDict, lineDocNum, DELIMITER, IS_GROUPED, isGrouped );
            }

            discountAmount = 0.0;
            discountPercent = 0.0;
            roundedDiscountAmount = 0.0;
            roundedDiscountPercent = 0.0;
            lineItemExtListPrice = 0.0;
            bundleID = util.getStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, QUOTE_NUMBER );
            // start add-on
            if( quoteType_quote == ADD_ON ){
                if( util.getStringAttribute(stringsDict, parentDocNum, DELIMITER, CORE_ASSET_SERVICEID) <> ""){
                    bundleID = util.getStringAttribute(stringsDict, parentDocNum, DELIMITER, CORE_ASSET_SERVICEID );
                }
            }
            //end add-on

            // Prep the data for unified pricing to be used in the next section. Get the unique part number list to feed to the util
            //Added By Sai Krishna -- A204 Test Script Issue Fix
            if(findinarray(unifiedPricingUniquePOList, childPo) == -1 AND currentAction <> TERMINATE_ACTION AND currentAction <> "") {
                append(unifiedPricingUniquePOList, childPo);
            }

            /* --------- If the line item is Dynamically Grouped ----------- */
            //Bundle ID for New Business
            if( quoteType_quote <> ADD_ON ){
                if (isGrouped == TRUE_STR) {
                    //bundleID = bundleID + "-" + string(util.getIntegerAttribute( integersDict, modelDocNum, DELIMITER, SEQ_NUM ));
                    // Case 119160
                    bundleID = bundleID + "-" + modelDocNum;
                }
            }

            //Case 00105835
            currentAction = util.getStringAttribute( stringsDict, lineDocNum, DELIMITER, ASSET_ACTION);
            if( quoteType_quote == ADD_ON and (currentAction == CREATE_ACTION OR currentAction == MODIFY_ACTION) ){ //For Addon and Create line items
                assetBundleID = util.getStringAttribute( stringsDict, modelDocNum, DELIMITER,ASSETS_ORIGINAL_BUNDLE_ID); //Get the original bundle id
                tmpSplitBundleID = split(bundleID,"-");//Split on -. Bundle id could for example 2012-1234 or 2012-1234-1(when bundled)
                if (isGrouped <> TRUE_STR) {    // If not grouped
                    if (sizeofarray(tmpSplitBundleID) > 1) {
                        bundleID = tmpSplitBundleID[0] + "-"+tmpSplitBundleID[1]; //only need 2012-1234
                    }
                } else {
                    if(sizeofarray(tmpSplitBundleID) <= 2) { // the core is also bundled.
                        bundleID = bundleID + "-" + modelDocNum;
                    }
                }

            }
            //Case 00180017 - Save Discount in Dict for use in calculating discount in Net Price Section
            if (discountType <> PERCENTAGE_DISCOUNT_TYPE) {
                if (extendedListPrice > 0.0) {
                    put(unbundledExtendedListPriceDict, lineDocNum, extendedListPrice);
                }
            } //End Case 00180017 (2/3)

            utilResultFlag = util.putStringAttribute(stringsDict, lineDocNum, DELIMITER, BUNDLE_ID, bundleID );

        }
        put( stringsDict, "currentModelDocNumForUnified", docNum );
        utilResultFlag = util.getUnifiedPricingData(unifiedPricingUniquePOList, unifiedPricingDataDict, stringsDict );
        /* --------- Zero the Model's discount, if not applicable ----------- */
        if (dynamicGroupingUsed <> true) {
            modelDiscount = 0.0;
        }else{
            utilResultFlag = util.putStringAttribute( stringsDict, modelDocNum, DELIMITER, MODEL_HAS_GROUPING, TRUE_STR );
        }

        utilResultFlag = util.putFloatAttribute(floatsDict, modelDocNum, DELIMITER, EXT_LIST_PRICE, modelExtListPrice);
        utilResultFlag = util.putFloatAttribute(floatsDict, modelDocNum, DELIMITER, DISCOUNT, modelDiscount);
        utilResultFlag = util.putFloatAttribute(floatsDict, modelDocNum, DELIMITER, DISCOUNT_AMOUNT, modelDiscountAmount);
        utilResultFlag = util.putFloatAttribute(floatsDict, modelDocNum, DELIMITER, DISCOUNT_PERCENT, modelDiscountPercent);

    }
}

//CSYS-99022, Phil S, 04/13/2020, I will put this quote line loop to above line loop
bConsultativeIntelligence = false;
bServiceAdmin = false;
bServiceAdminArray = string[]{"699","706","8896","440562"};
bUserSupportDesk = false;
bPolicyAudit = false;
bIntelligence = false;
bIntelligenceArray = string[]{"512","522","532","366608"};
//CSYS-101126 (SV. 12-11-2020) Added the below attributes
actionCodeArray = String[];
hdsCreateArray = String[];
onlyHDSHasCreate = false;
//CSYS-101126 End
createCoreInAddon = "false"; //CSYS-101253 (OK. 12-3-2020) //CSYS-103610
poIDArrayList = String []; //CSYS-105113 (OK. 12-28-2021)

for line in line_process {
    poID = line.poId_line;
    assetAction = line.assetAction_line;
    poCategory = line._part_custom_field20; //CSYS-101253 (OK. 12-3-2020)
	itemType = line._part_custom_field8; //CSYS-101253 (OK. 12-3-2020)
	
    append(actionCodeArray, assetAction);//CSYS-101126 (SV. 12-11-2020)
    if (assetAction=="CREATE"){
        //CSYS-101126 (SV. 12-11-2020) Start
	if(PoId == "5005" OR poId == "6969985"){
		append(hdsCreateArray, "yes");
	}
	else{
		append(hdsCreateArray, "No");
	}
	//CSYS-101126 End
        if(bConsultativeIntelligence == false){  //if bConsultativeIntelligence == true, no need to check again, performance improvement
            if (poID == "203744" or poID == "329165" or poID == "346220"){bConsultativeIntelligence = true;}
        }
        if(bServiceAdmin == false){  //if bServiceAdmin == true, no need to check again, performance improvement
            if (findinarray(bServiceAdminArray,poID)<>-1){
                bServiceAdmin = true;
            }
        }
        if(bUserSupportDesk == false){
            if (poID == "832" or poID == "440590"){
                bUserSupportDesk = true;
            }
        }
        if (bPolicyAudit == false){
            if (poID == "644"){
                bPolicyAudit = true;
            }
        }
        if(bIntelligence == false){  //if bIntelligence == true, no need to check again, performance improvement
            if (findinarray(bIntelligenceArray,poID)<>-1){
                bIntelligence = true;
            }
        }
    }
    //CSYS-101253 (OK. 12-3-2020) - Start: Check if Add-On quote is have New Core Service with Create action
	if (quoteType_quote == ADD_ON) {
		if (poCategory == "Core Service" AND itemType == "Base" AND assetAction == "CREATE") {
			createCoreInAddon = "true";
		}
	}
	//CSYS-101253 - End
	
	//CSYS-105113 (OK. 12-28-2021) Create new POID array
	if (findinarray(poIDArrayList, poID) == -1) {
		append(poIDArrayList, poID);
	}
	//CSYS-107571 SV. 27-12-2022 Start
	PRE_PROD_EXT_NET_PRICE_LINE = "preProductionExtNetPrice_line";
	docNum = line._document_number;
	newnbd = getdate();
	nbd = line.nextBillingDate_line;
	//IESCNQRCPQ-399 SV. 10-03-2023 Modified the if condtion below
	if(accountPreProduction_quote AND (preProductionExtNetPriceString_quote <> "" AND NOT(isnull(preProductionExtNetPriceString_quote))) AND assetAction <> "TERMINATE" AND containskey(preProdExtNetDict, poID) AND nbd <> "" AND poCategory == "Core Service" AND itemType == "Base"){
		if(find(nbd, "/") <> -1) {
			newnbd = strtojavadate(nbd, "MM/dd/yyyy");
		}
		else {
			newnbd = strtojavadate(nbd, "yyyy-MM-dd");
		}
		//IESCNQRCPQ-1659 (OK. 3-11-2024) Comment out the if condition to remove the 1 year date condition
		//if(comparedates(newnbd,dateNextYear) == 1){
			preProdExtNetPrice = get(preProdExtNetDict, poID);
			utilResultString = util.formAttrValueStr(attributesDict, PRE_PROD_EXT_NET_PRICE_LINE, docNum, preProdExtNetPrice);
			append(isPreProdRestatement,"true");
		//IESCNQRCPQ-1659 (OK. 3-11-2024) Comment out the else condition
		/*}
		else{
			utilResultString = util.formAttrValueStr(attributesDict, PRE_PROD_EXT_NET_PRICE_LINE, docNum, "");
		}*/
	}
	//CSYS-107571 End
	//IESCNQRCPQ-177 - Start - LIN - 03-08-2023 - Setting customPaymetExtractRenewal flag to true.
	if(poID =="8194288" AND (assetAction == NONE_ACTION OR assetAction == MODIFY_ACTION) AND termNumMonths_quote <> "" AND NOT(extractServiceExist) AND quoteType_quote == ADD_ON){
		customPaymentExtractRenewal = true;
		utilResultString = util.formAttrValueStr(attributesDict, "customPaymentExtractRenewal_quote", QUOTE_DOC_NUM, string(customPaymentExtractRenewal));
	}
	//IESCNQRCPQ-177 - End							   				  
}
//IESCNQRCPQ-399 SV. 10-03-2023 Start
if(NOT(isempty(isPreProdRestatement))){
	utilResultString = util.formAttrValueStr(attributesDict, "isPreProdRestatement_quote", QUOTE_DOC_NUM, TRUE_STR);
}
else{
	utilResultString = util.formAttrValueStr(attributesDict, "isPreProdRestatement_quote", QUOTE_DOC_NUM, FALSE_STR);
}
//IESCNQRCPQ-399 End
NEW_PRODUCT_START_DATE = "newProductStartDate_line"; //CSYS-100991 (SV. 22-12-2020)
TERM_DATE = "termDate_line"; //CSYS-100991 (SV. 22-12-2020)
//CSYS-101126 (SV. 12-11-2020) Start
if((findinarray(actionCodeArray,"NONE") == -1 AND findinarray(actionCodeArray,"MODIFY") == -1 AND findinarray(actionCodeArray,"TERMINATE") <> -1) AND (findinarray(hdsCreateArray,"No") == -1 AND findinarray(hdsCreateArray, "yes") <> -1)){
	orderEffectiveDateText = orderEffectiveDate_quote;
	print orderEffectiveDateText ;
	splitNewDate1 = split(orderEffectiveDateText, "-");
	yearVal1 = splitNewDate1[0];
	monthVal1 = splitNewDate1[1];
	dayVal1 = splitNewDate1[2];
	if(monthVal1 == "12"){
		monthVal1 = "01";
		yearVal1 = string(atoi(yearVal1) +1);
	}
	else{
		monthVal1 = string(atoi(monthVal1) +1);
	}
	dayVal1 = "01";
	orderEffectiveDateText = monthVal1+"/"+dayVal1+"/"+yearVal1;
	termNotice = termNotice_quote;
	
	startPos = find(termNotice, "(")+1;
	endPos = find(termNotice, ")");
	daysStr = substring(termNotice, startPos, endPos);
	if (termNotice == "Ninety (90) days"){
		monthVal1 = string(atoi(monthVal1) +3);	
	}
	if (termNotice == "Sixty (60) days"){
		monthVal1 = string(atoi(monthVal1) +2);
	}
	if(termNotice == "Thirty (30) days"){
		monthVal1 = string(atoi(monthVal1) +1);
	}
	if(termNotice == "Forty Five (45) days"){
		monthVal1 = string(atoi(monthVal1) +1);
		dayVal1 = string(atoi(dayVal1) +1);
	}
	if(monthVal1 == "13"){
		monthVal1 = "01";
		yearVal1 = string(atoi(yearVal1) +1);	
	}
	if(monthVal1 == "14"){
		monthVal1 = "02";
		yearVal1 = string(atoi(yearVal1) +1);	
	}
	if(monthVal1 == "15"){
		monthVal1 = "03";
		yearVal1 = string(atoi(yearVal1) +1);	
	}
	orderEffectiveDateText = monthVal1+"/"+dayVal1+"/"+yearVal1;
	//specialTerm = "The effective date of this order needs to be future dated to "+orderEffectiveDateText+" to accommodate the customers required termination notice of "+daysStr+" days.";
	//result = result + "1" + keyDelim + "specialTerms_quote" + keyDelim + specialTerm + delim;
	orderEffectiveDateDD="";
	if(len(monthVal1)==1){
		orderEffectiveDateDD = util.formatDate(yearVal1+"-0"+monthVal1+"-"+dayVal1, "long"); //CSYS-100991
	}
	else{
		orderEffectiveDateDD = util.formatDate(yearVal1+"-"+monthVal1+"-"+dayVal1, "long"); //CSYS-103182
	}
	npsd = strtodate(orderEffectiveDateText+" 00:00:00", "%m/%d/%Y %H:%M:%S");
	termDate = minusdays(npsd, 1);
	termDateText = datetostr(termDate , "MM/dd/yyyy");
	splitNewDate2 = split(termDateText, "/");	
	monthVal2 = splitNewDate2[0];
	dayVal2 = splitNewDate2[1];
	yearVal2 = splitNewDate2[2];
	termDateDD = util.formatDate(yearVal2+"-"+monthVal2+"-"+dayVal2, "long");
	//billingExceptionComments = "Billing must future date the Transaction Fee Start Date to "+orderEffectiveDateText+" for adding HDS and terminating existing assets to apply the termination notice of "+daysStr+" days ."; //CSYS-101300 (SV. 04-12-2020)
	//result = result + "1" + keyDelim + "billingExceptionCommentsHDS_quote" + keyDelim + billingExceptionComments + delim; //CSYS-101300 (SV. 04-12-2020)
	//result = result + "1" + keyDelim + "billingExceptionFlag_quote" + keyDelim + string(true)+ delim; //CSYS-101300 (SV. 04-12-2020)
	result = result + "1" + keyDelim + "tFSDForDocumentDesignerOfHDS_quote" + keyDelim + orderEffectiveDateDD + delim; //CSYS-100991 (SV. 22-12-2020)
	result = result + "1" + keyDelim + "orderEffectiveDateHDS_quote" + keyDelim + orderEffectiveDateText + delim; //CSYS-100991 (SV. 04-01-2021)
	result = result + "1" + keyDelim + "termDateForDocumentDesignerOfHDS_quote" + keyDelim + termDateDD + delim;
}
//CSYS-101126 End

result = result + "1" + keyDelim + "hasConsultativeIntelligence_quote" + keyDelim + string(bConsultativeIntelligence) + delim;
result = result + "1" + keyDelim + "hasServiceAdministration_quote" + keyDelim + string(bServiceAdmin) + delim;
result = result + "1" + keyDelim + "hasUserSupportDesk_quote" + keyDelim + string(bUserSupportDesk) + delim;
result = result + "1" + keyDelim + "hasPolicyAudit_quote" + keyDelim + string(bPolicyAudit) + delim;
result = result + "1" + keyDelim + "hasIntelligence_quote" + keyDelim + string(bIntelligence) + delim;

result = result + commerce.setIsBIselected(); //CSYS-99036, Phil S, 04/23/2020
result = result + commerce.setNonSystematizedReason(); //CSYS-99115, Phil S, 05/04/2020
result = result + commerce.setPaymentMethodChangedCCDD(); //CSYS-97516, Bhavna S, 11/05/2020

//CSYS-104836 (OK. 01-11-2022) Set "executeApprovalHistory_quote" flag value to true. This value used to trigger the "Execute Approval History" action in commerce.js file
if (overrideHardStop_quote == true AND updateOverrideHardStopHistory_quote == false) {
	result = result + "1" + keyDelim + "executeApprovalHistory_quote" + keyDelim + "true" + delim;
}

//IESCNQRCPQ-410 (OK. 2-21-2023) Setting futureOEDBillingException_quote flag value to blank when the quote is revised
if (futureOEDBillingException_quote <> "") {
	result = result + "1" + keyDelim + "futureOEDBillingException_quote" + keyDelim + "" + delim;
}

//CSYS-102764 (NP. 05/17/2021) Update Data Processing Agreement flag to the DPA value from account when Contract Source is changed back from SAP GTC
//Start
dpaValue = "";
if(dataProcessingAgreementFromAccountText_quote == "DPA Signed"){
	dpaValue = "dPASigned";
}
if(dataProcessingAgreementFromAccountText_quote == "No Signed DPA"){
	dpaValue = "noSignedDPA";
}
if(dataProcessingAgreementFromAccountText_quote == "Unknown"){
	dpaValue = "unknown";
}
if(dataProcessingAgreementFromAccountText_quote == ""){
	dpaValue = "";
}
//End CSYS-102764

//CSYS-99114 contract conversion to from concur paper to sap gtc flag
if (quoteType_quote == ADD_ON) {
    if (accountContractSource_quote == "Concur Paper") {
    	//if (contractSource_quote == "SAP GTC") {	 Changed the contract source with variable
    	//CSYS-101253 (OK. 12-3-2020) -  Start: Update the Contract Source to SAP GTC when the Contract Source is Concur Paper in Account level
    	//CSYS-101732 (OK. 1-20-2021) Updated the condition to support SMB BU
    	//CSYS-101937 (BS. 01/29/2021) Added extra the condition to not run when Historical Data Services is selected as Core Service
		//CSYS-103056 NP 06/10/2021 Modified the condition to update DPA logic
		if(findinarray(listOfCore, "Historical Data Services") == -1){
			if ((ownerBU_quote == "Enterprise BU" OR ownerBU_quote == "SMB BU") AND CONTRACT_SOURCE <> "SAP GTC") {
				//IESCNQRCPQ-1849 (OK. 6-3-2024) Updated the below condition with contractEffectiveDate check
				if((TERM_NUM_MONTHS <> "" OR createCoreInAddon == "true" OR comparedates(contractEffectiveDate, strtojavadate("8/1/2021", "MM/dd/yyyy")) == -1)){
					CONTRACT_SOURCE = "SAP GTC";
					utilResultString = util.formAttrValueStr(attributesDict, "contractSource_quote", QUOTE_DOC_NUM, CONTRACT_SOURCE);
				}					
			}
		}
		
		//CSYS-101253 - End
		if (CONTRACT_SOURCE == "SAP GTC") { 
			contractConversion = TRUE_STR; //CSYS-107695 (OK. 12-15-2022)
			utilResultString = util.formAttrValueStr(attributesDict, "contractConversionToSAPGTC_quote", QUOTE_DOC_NUM, TRUE_STR);
			//CSYS-100783 (BS. 10/13/2020) Update Data Processing Agreement flag to TRUE when Contract Source is changed from Concur Paper to SAP GTC CSYS-100884 NP 10/22/2020
			//CSYS-100913 (BS. 10/23/2020) Added extra check to only update BMI DPA Flag if Account DPA flag is not "DPA Signed" //CSYS-103610 removed this code for Enterprise BU
			
			//CSYS-107695 (OK. 12-15-2022) When Converting from Concur Paper to SAP GTC update the DPA flag to "DPA Signed 2021". For UK market we have separate DPA Value so exculde UK
			//IESCNQRCPQ-554 (OK. 4-7-2023) Replace "ownerMarket_quote" with "serviceCountry" to check the "United Kingdom"
			if (contractConversion == TRUE_STR AND serviceCountry <> "United Kingdom" AND NOT(partnerBillingQuote_quote)) {
				utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, "DPA Signed 2021");
			}
		}
		else {
			utilResultString = util.formAttrValueStr(attributesDict, "contractConversionToSAPGTC_quote", QUOTE_DOC_NUM, FALSE_STR);
			//CSYS-103056 NP 06/10/2021 removed the DPA logic to revert back DPA Flag
		}
    }
    else {
	utilResultString = util.formAttrValueStr(attributesDict, "contractConversionToSAPGTC_quote", QUOTE_DOC_NUM, FALSE_STR);
    }
	
	//CSYS-106023 (OK. 4-11-2022) Start - Comment out below if condition and add one if condition to use the DPA value with Version
	/*
	//CSYS-103056 NP 06/10/2021 moved the DPA logic out of the if condition
	if(DATA_PROCESSING_AGREEMENT <> "DPA Signed" AND (ownerBU_quote == "SMB BU" OR (ownerBU_quote == "Enterprise BU" AND (createCoreInAddon=="true" OR termNumMonths_quote<>""OR pTECreateExists=="true"))) AND NOT(partnerBillingQuote_quote)){ //CSYS-103174 removing condition for SMB BU non- renewal quotes CSYS-103610 updated condition for Enterprise BU CSYS-103884 NP 17/08/2021 CSYS-104419 NP 10/11/2021 Added condition to skip service partner quotes
		utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, DPA_SIGNED);
	}
	*/
	oldDPAValueArray = string[] {"DPA Signed", "No Signed DPA", "Unknown", ""}; //CSYS-106353 (LBN. 23/05/2022) Adding null value 
	hasOldDPAValues = "";
	if (findinarray(oldDPAValueArray, DATA_PROCESSING_AGREEMENT) <> -1) {
		hasOldDPAValues = TRUE_STR;
	}
	//CSYS-107089 (LBN. 19/09/2022) Removing contractConversion condition
	//CSYS-106353 (LBN. 23/05/2022) Modifying the condition to add DPA clause for all Enterprise BU & SMB BU add-on orders
	/* if(hasOldDPAValues == TRUE_STR AND (ownerBU_quote == "SMB BU" OR (ownerBU_quote == "Enterprise BU" AND (createCoreInAddon=="true" OR termNumMonths_quote<>""OR pTECreateExists=="true"))) AND NOT(partnerBillingQuote_quote)){
	*/
	//CSYS-107212 (OK. 9-28-2022) Adding ownerMarket_quote check to the below condition
	//IESCNQRCPQ-554 (OK. 4-7-2023) Replace "ownerMarket_quote" with "serviceCountry" to check the "United Kingdom"
	if(hasOldDPAValues == TRUE_STR AND NOT(partnerBillingQuote_quote) AND serviceCountry <> "United Kingdom"){
		utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, "DPA Signed 2021");
	}
	utilResultString = util.formAttrValueStr(attributesDict, "accountWithOldDPAFlagValue_quote", QUOTE_DOC_NUM, hasOldDPAValues);
	//CSYS-106023 - End
	
	//CSYS-106320 LIN 5/13/2022 Update DPA Language and Version when older DPA was previously signed
	//CSYS-106912 (OK. 8-17-2022) Comment out the below "if" condition and added new "if" condition
	//if(dataProcessingAgreementFromAccountText_quote == "DPA Signed 2018 - 2020" AND NOT(ownerMarket_quote =="United States" OR ownerMarket_quote =="Canada") AND NOT(partnerBillingQuote_quote)){
	gDPRRelevant = bmql("SELECT accountID18Digit FROM GDPRRelevantAccnt WHERE accountID18Digit = $customer_ID_BACK");
	accountId = "";
	for entry in gDPRRelevant {
		accountId = get(entry, "accountID18Digit");
	}
	//CSYS-107212 (OK. 9-28-2022) Adding ownerMarket_quote check to the below condition
	//IESCNQRCPQ-554 (OK. 4-7-2023) Replace "ownerMarket_quote" with "serviceCountry" to check the "United Kingdom"
	if(dataProcessingAgreementFromAccountText_quote == "DPA Signed 2018 - 2020" AND accountId == customer_ID_BACK  AND NOT(partnerBillingQuote_quote) AND serviceCountry <> "United Kingdom") {
		hasOldDPAValues = TRUE_STR;
		utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, "DPA Signed 2021");
		utilResultString = util.formAttrValueStr(attributesDict, "accountWithOldDPAFlagValue_quote", QUOTE_DOC_NUM, hasOldDPAValues);
	}
	//CSYS-106320 - End
	
	//CSYS-107212 (OK. 9-28-2022) For United Kingdom market need to update new "DPA Signed UK 2022"
	//IESCNQRCPQ-554 (OK. 4-7-2023) Replace "ownerMarket_quote" with "serviceCountry" to check the "United Kingdom"
	if (serviceCountry == "United Kingdom" AND dataProcessingAgreementFromAccountText_quote <> "DPA Signed UK 2022" AND NOT(partnerBillingQuote_quote)) {
		utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, "DPA Signed UK 2022");
		utilResultString = util.formAttrValueStr(attributesDict, "updateDPAFlagWithUK_quote", QUOTE_DOC_NUM, TRUE_STR);
	}
	
	//IESCNQRCPQ-1597 (OK. 3-4-2024) DPA rule for Japan customers
	if (contractingEntity_quote == "Concur Japan (JV)" AND dataProcessingAgreementFromAccountText_quote == "DPA Signed 2018 - 2020" AND NOT(partnerBillingQuote_quote)) {
		hasOldDPAValues = TRUE_STR;
		utilResultString = util.formAttrValueStr(attributesDict, "accountWithOldDPAFlagValue_quote", QUOTE_DOC_NUM, hasOldDPAValues);
		utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, "DPA Signed 2021");
	}
}
else {
    utilResultString = util.formAttrValueStr(attributesDict, "contractConversionToSAPGTC_quote", QUOTE_DOC_NUM, FALSE_STR);
}
utilResultString = util.formAttrValueStr(attributesDict, "createCoreInAddon_quote", QUOTE_DOC_NUM, createCoreInAddon); //CSYS-103610 saving value for document
//CSYS-100913 (BS. 10/23/2020) Update Data Processing Agreement flag to DPA Signed if New Business and Contract Source is SAP GTC
//Start
if(quoteType_quote == NEW_BIZ){
	if (CONTRACT_SOURCE == "SAP GTC" AND NOT(partnerBillingQuote_quote)) { //CSYS-104419 NP 10/11/2021 Added condition to skip service partner quotes
		//CSYS-106023 (OK. 4-11-2022) Comment out below line and add new one to use the new DPA value with Version
		//utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, DPA_SIGNED);
		
		//CSYS-107212 (OK. 9-28-2022) For United Kingdom market need to update new "DPA Signed UK 2022" and other markets work with "DPA Signed 2021"
		//IESCNQRCPQ-554 (OK. 4-7-2023) Replace "ownerMarket_quote" with "serviceCountry" to check the "United Kingdom"
		if (serviceCountry == "United Kingdom") {
			utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, "DPA Signed UK 2022");
		}
		else {
			utilResultString = util.formAttrValueStr(attributesDict, "dataProcessingAgreementMenu_quote", QUOTE_DOC_NUM, "DPA Signed 2021");
		}
	}
}
//End CSYS-100913

//CSYS-99331
promoBundleExtServComp ="";
resultSet = BMQL("select PromoCode from PromoBundleComp");
for r in resultSet{
    promoCodeTemp = get(r,"PromoCode");
    promoBundleExtServComp = promoBundleExtServComp + promoCodeTemp + ",";
}
result = result + "1" + keyDelim + "promoBundleExtServComp_quote" + keyDelim + promoBundleExtServComp + delim;
//end of CSYS-99331


//CSYS-79624 (KA. 3-20-2017): call the logic that has moved:
//CSYS-95701 SN. 09-2019 Add travelAndExpenseWithTriplinkProductArr to argument list
pricingMisc = commerce.pricingMisc(attributesDict, stringsDict, assetBillingDict, QUOTE_LEVEL_RAMP_PLAN, createdDate, triggerDict, isCoreChangedDict, isEditionChangedDict, actionName, floatsDict, docNumList, listOfCore, listOfIM, QUOTE_TOTAL_EXISTING_ARR, strImpMethod, siteReviewEliteExistInQuote, siteReviewExistInQuote, consultingSessionExistInQuote, multiCountryExpExistInQuote, singleCountryExpExistInQuote, meetMgtInQuote, intelligenceReportInQuote, clientWebServiceInQuote, premierTravelExistInQuote, concurforceExistInQuote, outputDisplayRamp, conversionRate, countryIsoCode, currencyCode, PRICELIST, billingCycleNumber, termNumMonths_quote, promoCodeDetails, promoCodeApplied, autoAppliedPromotions, applicablePromotions, invalidPromoMessage, totalPromoDiscounts, integersDict, QUOTE_TRANSACTIONS, CURRENCY_SYMBOL, listOfNumOfTransPOs,  RAMP_FLAG_MULTIPLIER, errorDict, acctPartnerDiscount, incToBaseDict, businessUnit, PROD_FAM_TIER_DECREASE_OCCURRED_DICT, modelToLineDocNumsDict, numDecimals, cipPiDict, unbundledExtendedListPriceDict, promotionsDataDict, tempPromoCodeAppliedArr, tempPromoCodeAppliedDict, unifiedPricingDataDict, travelAndExpenseWithTriplinkProductArr);

//CSYS-99026 (OK. 06-05-2020) Set the Sales ARR Modified flag true based on Tier change and Billing Pull List date.
//we have Tier change logic in Pricing so setting this condition here, after executing the Pricing Misc function.
//Start
if(quoteType_quote == ADD_ON AND billingPullList_quote <> "")
{
    billingPullListQuarter = util.isDateWithinTheCurrentQuarter(billingPullList_quote); // Check the Billing Pull List date is within current Quarter or not.
    
    if(quoteTierChange == "true" AND billingPullListQuarter == true)
    {
        utilResultString = util.formAttrValueStr(attributesDict, "salesArrModified_quote", QUOTE_DOC_NUM, "true");
        utilResultString = util.formAttrValueStr(attributesDict, "billingPullListAlert_quote", QUOTE_DOC_NUM, "true"); //To set the ARR Disputes value in SFDC          
    }
    else {
        utilResultString = util.formAttrValueStr(attributesDict, "billingPullListAlert_quote", QUOTE_DOC_NUM, "false");
    }
}
//CSYS-99026 (OK. 06-05-2020) End
//CSYS-101106 (SV. 10-12-2020) Start
IS_PROMO_BUNDLE_VALIDATION = "isPromoBundleValidation_quote";
IS_PROMO_BUNDLE_VALIDATION_LINE = "isPromoBundleValidation_line";
PROMO_CODES_LINE = "promotionCode_line";
coreMofied = false;
parentDocNumStr = "";
parentDocNumCreateStr = "";//IESCNQRCPQ-1249
for modelDocNum in docNumList {
	pi = util.getStringAttribute(stringsDict, modelDocNum, DELIMITER, PART_NUM);
	lineItemDocNums = string[];
    	lineItemDocNums = util.getStrListDict(modelToLineDocNumsDict, modelDocNum, lineItemDocNums);	
	if (pi == "") {        
        	for lineDocNum in lineItemDocNums {
			currentAction = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, ASSET_ACTION);
			parentDocNum = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, PARENT_DOC_NUM);
			poCategoryCore = util.getStringAttribute(stringsDict, lineDocNum, DELIMITER, PO_CATEGORY);//IESCNQRCPQ-1249
			//IESCNQRCPQ-1249 - Updated to condition to check the core services - Start
			if(quoteType_quote == ADD_ON AND (currentAction == NONE_ACTION OR currentAction == MODIFY_ACTION OR currentAction == TERMINATE_ACTION) AND poCategoryCore == CORE_SERVICE){ 	
				if(find (parentDocNumStr, "*"+parentDocNum+"*")== -1 ){
					parentDocNumStr = parentDocNumStr+"*"+parentDocNum+"*";
					break;
				}
			}
			if(quoteType_quote == ADD_ON AND (currentAction == CREATE_ACTION) AND poCategoryCore == CORE_SERVICE){
				if(find (parentDocNumCreateStr, "*"+parentDocNum+"*")== -1 ){
					parentDocNumCreateStr = parentDocNumCreateStr+"*"+parentDocNum+"*";
					break;
				}
			}
			//IESCNQRCPQ-1249- End
		}
	}
}
parentDoc = "";//CSYS-106562
uQGCore = "";////CSYS-106562
								   
//CSYS-105113 (OK. 12-28-2021) Start - set "overrideDefaultRampPlan_line" flag to true for SLA SKU's based on parent SKU's value. This flag value used in Document designer xsl to display the ramp plan pricing value
for line in line_process {
	po = line.poId_line;
	docNum = line._document_number;
	parentPOID = "";
	childPOID = "";
	poDict = dict("string");//CSYS-106562
	customUQG = "";//CSYS-106562
	piItemType = line._part_custom_field8;//CSYS-106562
	parentDocNum = util.getStringAttribute(stringsDict, docNum, DELIMITER, PARENT_DOC_NUM); //CSYS-106562
	billingCounter = util.getStringAttribute( stringsDict, parentDocNum, DELIMITER, BILLING_COUNTER); //CSYS-106562									  																																							  
	parentPoValuesFromTable = bmql("SELECT parentPoID, childPoID FROM ProductBasedRecServs WHERE childPoID = $po");
	
	for rec in parentPoValuesFromTable {
		childPO = get(rec, "childPoID");
		parentPO = get(rec, "parentPoID");
		if (findinarray(poIDArrayList, parentPO) <> -1) {
			parentPOID = parentPO;
			childPOID = childPO;
		}
	}
	if (childPOID == po) {
		if (containskey(stringsDict, parentPOID + DELIMITER + "overrideDefaultRampPlanForPoID")) {
			utilResultString = util.formAttrValueStr(attributesDict, "overrideDefaultRampPlan_line", docNum, TRUE_STR);
		}
		else {
			utilResultString = util.formAttrValueStr(attributesDict, "overrideDefaultRampPlan_line", docNum, "");
		}
	}
	//CSYS-106562 - Start - Included condition for CSYS-106563
	if(ownerMarket_quote == "Japan" AND line._part_custom_field8 =="Incremental"){
		if(line._part_custom_field9 == "ConcurExpense" AND billingCounter == "Expense User Based"){
			customUQG  = "ConcurDistinctExpense";
			put(poDict,line._part_custom_field1,customUQG);
		}
		else{
			if(line._part_custom_field9 <> ""){
				customUQG  = line._part_custom_field9;
				put(poDict,line._part_custom_field1,customUQG);
			}
		}
		if(containskey(poDict, line._part_custom_field1) AND (line._part_custom_field8 =="Incremental")){
			if(line.poCategory_line == "Core Service"){
				uQGCore = get(poDict,line._part_custom_field1);
				parentDoc = line._parent_doc_number;
			}
			currentAction = get(stringsDict, po + DELIMITER + "itemTypeActionSync" + DELIMITER + piItemType);
			print get(stringsDict, po + DELIMITER + "itemTypeActionSync" + DELIMITER + piItemType);
			
			if(quoteType_quote == "New Business" or currentAction == "MODIFY" or line.assetAction_line == "CREATE"){
				result = result + line._document_number + "~" + "usageQualificationGroup_line" + "~" + get(poDict,line._part_custom_field1) + "|";
			}
			else{
				result = result + line._document_number + "~" + "usageQualificationGroup_line" + "~" + line.usageQualificationGroup_line+ "|";
			}
		}
	}
	if(ownerMarket_quote <> "Japan" AND line._part_custom_field8 =="Incremental"){
		result = result + line._document_number + "~" + "usageQualificationGroup_line" + "~" + line._part_custom_field9 + "|";
	}
	//CSYS-106562 - End	
//IESCNQRCPQ-724 SV (15-06-2023) Start
	pi = line._part_number;	
	family = get(familyPartNoDict,pi);	
	if(quoteType_quote == ADD_ON){
		if(line.assetAction_line == "CREATE"){
			put(promoCreateDict,pi,parentDocNum+"~"+family);
		}
		if(line.assetAction_line == "TERMINATE"){
			put(promoDeleteDict,parentDocNum+"~"+family,pi);
		}
	}
	//IESCNQRCPQ-724 End	
}
//CSYS-105113 - End
//IESCNQRCPQ-724 SV (15-06-2023) Start
getKeysOfCreate = keys(promoCreateDict);
for key in getKeysOfCreate{
	valueOfCreate = get(promoCreateDict, key);
	if(containskey(promoDeleteDict, valueOfCreate)){
		append(piForNoPromoArray,key);
	}	
}
//IESCNQRCPQ-724 End
IS_PROMOTION_WARNING_LINE = "isPromotionWarnig_line"; //CSYS-107719 SV. 04-01-2022
PRODUCT_REPLACEMENT_LINE = "productReplacement_line"; //CSYS-107719 SV. 04-01-2022
PROMOTION_SFDC_CODE_LINE = "promotionSFDCCode_line"; //CSYS-107719 SV. 04-01-2022
appliedPromoArray = string[];
appliedPromoArray = split(externalPromotion_quote,"~");
promoAddedString = ",";	
PromoOnCreateDeleteOfSameFamilArray = boolean[];
//IESCNQRCPQ-550 (PG 19-04-2023) Start 
nonInvoiceCoreExists = false;
InvoiceCoreExists = false;
profServicesCREATEexists = false;
extServicesCREATEexists = false;
profServicesCREATEexistsforInvoice = false;
extServicesCREATEexistsforInvoice = false;		
//IESCNQRCPQ-550 (PG 19-04-2023) End  
if(quoteType_quote == ADD_ON){
	for line in line_process {
		parentDocNum = line._parent_doc_number;
		docNum = line._document_number;
		isGrouped = line.isPartOfPackage_line;
		promoCodes = line.promotionCode_line;
		PO_CATEGORY = line.poCategory_line;
		assetAction = line.assetAction_line;
		coreOffering = line.coreOffering_line;
		promoCodes = util.getStringAttribute(stringsDict, docNum, DELIMITER, PROMO_CODES_LINE);		
		if((find (parentDocNumStr, "*"+parentDocNum+"*") > -1) AND isGrouped == true AND promoCodes <> "" AND promoCodes <> "RENEWALOFFER90DAYS"){//print "line Number ="; print line;
			utilResultString = util.formAttrValueStr(attributesDict, IS_PROMO_BUNDLE_VALIDATION_LINE, docNum, TRUE_STR);
		}
		else
		{
			utilResultString = util.formAttrValueStr(attributesDict, IS_PROMO_BUNDLE_VALIDATION_LINE, docNum, FALSE_STR);
		}
		//CSYS-107719 SV. 04-01-2022 Start
		productReplacement = "";
		productReplacementDict =  get(attributesDict, docNum + "~" + "productReplacement_line");
		productReplacementSplit = split(productReplacementDict, "~");
		if(productReplacementDict <> "" AND NOT(isnull(productReplacementDict))){
			productReplacement = productReplacementSplit [2];
			productReplacement = replace(productReplacement, "|", "");
		}
		else{	
			productReplacement = "";
		}
		promoSFDCCode = "";
		promoSFDCCodeDict =  get(attributesDict, docNum + "~" + "promotionSFDCCode_line");
		print "promoSFDCCodeDict = "; print promoSFDCCodeDict;
		promoSFDCCodeSplit = split(promoSFDCCodeDict, "~");				
		if(promoSFDCCodeDict <> "" AND NOT(isnull(promoSFDCCodeDict))){
			promoSFDCCode = promoSFDCCodeSplit[2];
			promoSFDCCode = replace(promoSFDCCode, "|", "");
		}
		else{	
			promoSFDCCode = "";
		}
		pi = line._part_number;
		//IESCNQRCPQ-724 SV (15-06-2023) modified the condition of the below if clause
		//if((productReplacement <> "" AND NOT(isnull(productReplacement))) AND promoCodes <> "" AND NOT(overrideHardStop_quote)){	
		if(findinarray(piForNoPromoArray,pi) <> -1 AND promoCodes <> "" AND NOT(overrideHardStop_quote)){		
			utilResultString = util.formAttrValueStr(attributesDict, PROMO_CODES_LINE, docNum, "");
			utilResultString = util.formAttrValueStr(attributesDict, PROMOTION_SFDC_CODE_LINE, docNum, "");
			utilResultString = util.formAttrValueStr(attributesDict, IS_PROMOTION_WARNING_LINE, docNum, TRUE_STR);
			utilResultString = util.formAttrValueStr(attributesDict, PROMO_DETAILS, docNum, ""); //SV. IESCNQRCPQ-1019 Added to fix the bug
			utilResultString = util.formAttrValueStr(attributesDict, PROMO_DETAILS_STR, docNum, ""); //SV. IESCNQRCPQ-1019 Added to fix the bug
			append(PromoOnCreateDeleteOfSameFamilArray,true);
		}
		else{
			promoAddedString = promoAddedString+promoCodes+",";
			utilResultString = util.formAttrValueStr(attributesDict, PROMO_CODES_LINE, docNum, util.getStringAttribute(stringsDict, docNum, DELIMITER, PROMO_CODES_LINE));
			utilResultString = util.formAttrValueStr(attributesDict, PROMOTION_SFDC_CODE_LINE, docNum, promoSFDCCode);			
			utilResultString = util.formAttrValueStr(attributesDict, IS_PROMOTION_WARNING_LINE, docNum, FALSE_STR);
		}
		//CSYS-107719 End
		//IESCNQRCPQ-550 (PG 19-04-2023) Start - For Title Frame display for Japanese Order Form
		if (PO_CATEGORY == "Core Service" AND coreOffering == "Invoice Processing" AND assetAction == "NONE")
		{
			InvoiceCoreExists = true;
		}
		if (coreOffering == "Invoice Processing" AND (PO_CATEGORY == "Professional Service" AND (assetAction == "CREATE" OR assetAction == "MODIFY"))){
			profServicesCREATEexistsforInvoice = true;
		}
		if (coreOffering == "Invoice Processing" AND (PO_CATEGORY == "Extended Service" AND (assetAction == "CREATE" OR assetAction == "MODIFY"))){
			extServicesCREATEexistsforInvoice = true;
		}
		if (PO_CATEGORY == "Core Service" AND coreOffering <> "Invoice Processing" AND assetAction == "NONE")
		{
			nonInvoiceCoreExists = true;
		}
		if (coreOffering <> "Invoice Processing" AND (PO_CATEGORY == "Professional Service" AND (assetAction == "CREATE" OR assetAction == "MODIFY"))){
			profServicesCREATEexists = true;
		}
		if (coreOffering <> "Invoice Processing" AND (PO_CATEGORY == "Extended Service" AND (assetAction == "CREATE" OR assetAction == "MODIFY"))){
			extServicesCREATEexists = true;
		}
		//IESCNQRCPQ-550 (PG 19-04-2023) End
	}
}
//CSYS-101106 End
//CSYS-107719 Start
extPromo = "";
for each in appliedPromoArray{
	if(find(promoAddedString,","+each+",") <> -1){
		//extPromo = extPromo+each+"~";//print "extPromo = "; print extPromo;
		extPromo = extPromo+each+","; //As per the fix given by SR 3-3390048189 IESCNQRCPQ-915 (SV. 08-09-2023)
	}	
}
extPromo = substring(extPromo, 0, len(extPromo)-1);
if(findinarray(PromoOnCreateDeleteOfSameFamilArray, true ) <> -1){
	//utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, EXTERNAL_PROMOTION, extPromo);
	utilResultString = util.formAttrValueStr(attributesDict, "externalPromotion_quote", QUOTE_DOC_NUM, extPromo);	
}
//CSYS-107719 End
//IESCNQRCPQ-550 (PG 19-04-2023) Start - For Title Frame display for Japanese Order Form
if(nonInvoiceCoreExists == true AND (profServicesCREATEexists == true OR extServicesCREATEexists == true)){
		utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, "createLinesInAddOnQuote_Quote", TRUE_STR);
		utilResultString = util.formAttrValueStr(attributesDict, "createLinesInAddOnQuote_Quote", QUOTE_DOC_NUM, TRUE_STR);
		}
		else
		{
		utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, "createLinesInAddOnQuote_Quote", FALSE_STR);
		utilResultString = util.formAttrValueStr(attributesDict, "createLinesInAddOnQuote_Quote", QUOTE_DOC_NUM, FALSE_STR);
		}
		
if(InvoiceCoreExists == true AND (profServicesCREATEexistsforInvoice == true OR extServicesCREATEexistsforInvoice == true)){
		utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, "createLinesInAddOnQuoteForInvoice_quote", TRUE_STR);
		utilResultString = util.formAttrValueStr(attributesDict, "createLinesInAddOnQuoteForInvoice_quote", QUOTE_DOC_NUM, TRUE_STR);
		}
		else
		{
		utilResultFlag = util.putStringAttribute(stringsDict, QUOTE_DOC_NUM, DELIMITER, "createLinesInAddOnQuoteForInvoice_quote", FALSE_STR);
		utilResultString = util.formAttrValueStr(attributesDict, "createLinesInAddOnQuoteForInvoice_quote", QUOTE_DOC_NUM, FALSE_STR);
		}
//IESCNQRCPQ-550 (PG 19-04-2023) End
result = result + commerce.calculateMonthlyOffsetBeforeSubmit(attributesDict); //CSYS-105667, LIN, 02/03/2022
return result;